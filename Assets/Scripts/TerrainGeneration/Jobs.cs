using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using Unity.Burst;
using System.Runtime.CompilerServices;
using System;
using Unity.Collections.LowLevel.Unsafe;
using Terraxel.DataStructures;

namespace Terraxel.WorldGeneration
{
    [BurstCompile(FloatPrecision.Low, FloatMode.Fast)]
    public struct Mesh2DJob : IJobFor
    {
        [ReadOnly] public NativeArray<float> heightMap;
        [ReadOnly] public int3 chunkPos;
        
        [ReadOnly] public int chunkSize;
        [ReadOnly] public int depthMultiplier;
        [WriteOnly] public NativeReference<bool> isEmpty;
        [WriteOnly] public NativeArray<VertexData> vertices;
        [WriteOnly] public NativeList<InstanceData> grassData;
        [WriteOnly] public NativeList<InstanceData> treeData;
        [WriteOnly, NativeDisableParallelForRestriction] public NativeArray<ushort> indices;
        public Unity.Mathematics.Random rng;
        public NativeReference<float3x2> renderBounds;
        int triIndex;

        public void Execute(int index)
        {
            int2 vertPos = Utils.IndexToXz(index, chunkSize);
            var height = SampleHeight(vertPos);
            var _vertPos = new float3(vertPos.x * depthMultiplier, height - chunkPos.y, vertPos.y * depthMultiplier);
            var normal = GetVertexNormal(vertPos);
            var angle = math.dot(normal, new float3(0,1,0));
            vertices[index] = new VertexData(_vertPos, normal, math.clamp((1-angle),0,1));
            var bounds = renderBounds.Value;
            bounds.c0 = math.min(_vertPos, bounds.c0);
            bounds.c1 = math.max(_vertPos, bounds.c1);
            renderBounds.Value = bounds;
            if(height > chunkPos.y && height < chunkPos.y + chunkSize * depthMultiplier){
                if(angle > 0.9f){
                    if(depthMultiplier < 8 && rng.NextFloat(0, 100) < 2){
                        treeData.Add(new InstanceData(float4x4.TRS(_vertPos + chunkPos, Utils.AlignWithNormal(normal, rng), new float3(rng.NextFloat(1f, 2f)))));
                    }
                    else if(depthMultiplier < 4 && rng.NextFloat(0, 100) < 30){
                        grassData.Add(new InstanceData(float4x4.TRS(_vertPos + chunkPos, Utils.AlignWithNormal(normal, rng), new float3(0.2f,0.2f, rng.NextFloat(0.3f, 0.5f)))));
                    }
                }
                if(vertPos.x > 0 && vertPos.y > 0){
                    isEmpty.Value = false;
                    indices[triIndex * 6 + 0] = (ushort)Utils.XzToIndex(vertPos + new int2(-1, -1), chunkSize);
                    indices[triIndex * 6 + 1] = indices[triIndex * 6 + 4] = (ushort)Utils.XzToIndex(vertPos + new int2(-1, 0), chunkSize);
                    indices[triIndex * 6 + 2] = indices[triIndex * 6 + 3] = (ushort)Utils.XzToIndex(vertPos + new int2(0, -1), chunkSize);
                    indices[triIndex * 6 + 5] = (ushort)Utils.XzToIndex(vertPos + new int2(0, 0), chunkSize);
                    triIndex++;
                }
            }
            //var localPos = math.abs(vertices[index].vertex);
            //VertexData vert = new VertexData(new float3(localPos.x, heightMap[Utils.XzToIndex(new int2((int)localPos.x, (int)localPos.z), ChunkManager.chunkResolution)], localPos.z), 0);
            //vertices[index] = vert;
        }
        public float3 GetVertexNormal(int2 localPos){
            float3 xVec = new float3(localPos.x + depthMultiplier, SampleHeight(new int2(localPos.x + 1, localPos.y)), localPos.y) - new float3(localPos.x - depthMultiplier, SampleHeight(new int2(localPos.x - 1, localPos.y)), localPos.y);
            //Debug.Log(xVec);
            float3 yVec = new float3(localPos.x, SampleHeight(new int2(localPos.x, localPos.y + 1)), localPos.y + depthMultiplier) - new float3(localPos.x, SampleHeight(new int2(localPos.x, localPos.y - 1)), localPos.y - depthMultiplier);
            return math.normalize(math.cross(yVec, xVec));
        }
        float SampleHeight(int2 localPos){
            return heightMap[Utils.XzToIndex(localPos + 1, chunkSize + 2)];
        }
    }
    [BurstCompile]
    public struct TransitionMeshJob : IJobFor
    {
        //[WriteOnly] public Counter vertexCounter;
        
        //[WriteOnly] public Counter indexCounter;
        public NativeList<TransitionVertexData> vertices;
        public NativeList<ushort> triangles;
        public NativeArray<int2> meshStarts;
        public TempBuffer vertexIndices;
        public int indexTracker;
        public MeshingHelper helper;
        public void Execute(int index)
        {
            //int index = Utils.XyzToIndex(voxel2DLocalPosition.x, transitionIndex, voxel2DLocalPosition.y, ChunkManager.chunkResolution);
            var localPos =  Utils.IndexToXyz(index, ChunkManager.chunkResolution);
            int transitionIndex = localPos.y;
            if(indexTracker != transitionIndex){
                int2 counts = new int2(vertices.Length, triangles.Length);
                //Debug.Log(counts.x + " verts, " + counts.y + " indices");
                meshStarts[transitionIndex] = counts;
                indexTracker = transitionIndex;
            }
            var shit = Utils.XyzToIndex(localPos.x, transitionIndex, localPos.z, ChunkManager.chunkResolution);
            if(helper.depthMultiplier == 1) return;
            int3 voxelLocalPosition = 0;
            if(transitionIndex == 0) {voxelLocalPosition = new int3(ChunkManager.chunkResolution - 1, localPos.x, localPos.z);}
            else if(transitionIndex == 1) {voxelLocalPosition = new int3(0, localPos.x, localPos.z);}
            else if(transitionIndex == 2) {voxelLocalPosition = new int3(localPos.x, localPos.z, ChunkManager.chunkResolution - 1);}
            else if(transitionIndex == 3) {voxelLocalPosition = new int3(localPos.x, localPos.z, 0);}
            else if(transitionIndex == 4) {voxelLocalPosition = new int3(localPos.x, ChunkManager.chunkResolution - 1, localPos.z);}
            else if(transitionIndex == 5) {voxelLocalPosition = new int3(localPos.x, 0, localPos.z);}
            int2 voxel2DLocalPosition = new int2(localPos.x, localPos.z);
            var density = GetTransitionFace(voxelLocalPosition, transitionIndex);
            int transitionCase = GetTransitionCase(density);
            if(transitionCase == 0 || transitionCase == 511) return;
            int transitionClass = Tables.transitionCellClass[transitionCase];

            var cellData = Tables.TransitionCellData[transitionClass & 0x7F][0];
            int vertexCount = (cellData >> 4);
            int triangleCount = (cellData & 0x0F);

            CellIndices transitionCellIndices = new CellIndices();
            var currentCell = vertexIndices.transitionVertexIndices[index];
            for (int i = 0; i < vertexCount; i++)
            {
                ushort edge = (ushort)(Tables.transitionVertexData[transitionCase][i]);

                byte v0 = (byte)((edge >> 4) & 0x0F); //First Corner Index
                byte v1 = (byte)(edge & 0x0F); //Second Corner Index


                int2 cellDirection = DecodeTransitionCellIndices((byte)(edge >> 12), transitionIndex);
                int vertexEdgeIndex = (edge >> 8) & 0xF;
                if((edge >> 12) == 8 || (edge >> 12) == 4){
                    // Vertex lies in the interior of the edge.
                    var newVertexIndex = CreateNewVertex(voxelLocalPosition * helper.depthMultiplier + Tables.TransitionDirectionTable[transitionIndex * 9 + Tables.TransitionEdgeRemap[v0]] * helper.depthMultiplier / 2,voxelLocalPosition * helper.depthMultiplier + Tables.TransitionDirectionTable[transitionIndex * 9 + Tables.TransitionEdgeRemap[v1]] * helper.depthMultiplier / 2, (sbyte)density[v0], (sbyte)density[v1], true, v0 > 8 && v1 > 8);
                    transitionCellIndices[i] = newVertexIndex;
                    if((edge >> 12) == 8)
                        currentCell[vertexEdgeIndex] = newVertexIndex;
                }else{
                    if((cellDirection.x == -1 && voxel2DLocalPosition.x == 0) || (cellDirection.y == -1 && voxel2DLocalPosition.y == 0)){
                        transitionCellIndices[i] = CreateNewVertex(voxelLocalPosition * helper.depthMultiplier + Tables.TransitionDirectionTable[transitionIndex * 9 + Tables.TransitionEdgeRemap[v0]] * helper.depthMultiplier / 2,voxelLocalPosition * helper.depthMultiplier + Tables.TransitionDirectionTable[transitionIndex * 9 + Tables.TransitionEdgeRemap[v1]] * helper.depthMultiplier / 2, (sbyte)density[v0], (sbyte)density[v1], true, v0 > 8 && v1 > 8);
                    }
                    else{
                        //transitionCellIndices[i] = CreateNewVertex(voxelLocalPosition * helper.depthMultiplier + Tables.TransitionDirectionTable[transitionIndex * 9 + Tables.TransitionEdgeRemap[v0]] * helper.depthMultiplier / 2,voxelLocalPosition * helper.depthMultiplier + Tables.TransitionDirectionTable[transitionIndex * 9 + Tables.TransitionEdgeRemap[v1]] * helper.depthMultiplier / 2, (sbyte)density[v0], (sbyte)density[v1], true, v0 > 8 && v1 > 8);
                    
                        transitionCellIndices[i] = GetTransitionCell(voxel2DLocalPosition + cellDirection, transitionIndex)[vertexEdgeIndex];
                    }
                }
            }
            vertexIndices.transitionVertexIndices[index] = currentCell;
            bool reverse = (transitionClass >> 7) == 1;
            if(transitionIndex == 1 || transitionIndex == 2 || transitionIndex == 4) reverse = !reverse;
            for(int i = 0; i < triangleCount; i++){
                //var idx = indexCounter.Increment() * 3;
                for(int v = 0; v < 3; v++){
                    //Debug.Log(transitionCellIndices[Tables.TransitionCellData[((transitionClass & 0x7F) * 37) + i * 3 + v + 1]] + " - " + meshStarts[transitionIndex].x + " = " + (transitionCellIndices[Tables.TransitionCellData[((transitionClass & 0x7F) * 37) + i * 3 + v + 1]] - meshStarts[transitionIndex].x));
                    triangles.Add((ushort)(transitionCellIndices[Tables.TransitionCellData[transitionClass & 0x7F][i * 3 + (reverse ? 2 - v : v) + 1]] - meshStarts[transitionIndex].x));
                }
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private CellIndices GetTransitionCell(int2 voxelLocalPosition, int faceIdx){
            //Debug.Log(Utils.XyzToIndex(voxelLocalPosition.x, faceIdx, voxelLocalPosition.y, ChunkManager.chunkResolution));
            return vertexIndices.transitionVertexIndices[Utils.XyzToIndex(voxelLocalPosition.x, faceIdx, voxelLocalPosition.y, ChunkManager.chunkResolution)];
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        int2 DecodeTransitionCellIndices(byte idx, int transitionIndex){
            int2 value = new int2();
            //TODO: wtf is going on here
            if(transitionIndex == 2 || transitionIndex == 3){
                if(idx == 1){
                    value.x = -1;
                }else if(idx == 2){
                    value.y = -1;
                }
            }else{
                if(idx == 2){
                    value.x = -1;
                }else if(idx == 1){
                    value.y = -1;
                }
            }
            return value;
        }
        private ushort CreateNewVertex(int3 lowerEndPointPos, int3 higherEndPointPos, sbyte lowerEndPointDensity, sbyte higherEndPointDensity, bool surfaceShift = true, bool transitionOffset = false){
            //Surface shift
            int near = helper.GetVertexNearEdgeMask((float3)(lowerEndPointPos + higherEndPointPos) * 0.5f);
            if(surfaceShift && near == 0 && helper.depthMultiplier != 1){
                int3 posInDensityMap = new int3(0);
                int3 oldPos = new int3(-1);
                while(!oldPos.Equals(posInDensityMap)){
                    oldPos = posInDensityMap;
                    posInDensityMap = ((lowerEndPointPos) + (higherEndPointPos)) / 2;
                    sbyte halfWayDensity = helper.SampleDensityRaw(posInDensityMap);
                    if((lowerEndPointDensity >= 0 && halfWayDensity >= 0) || (lowerEndPointDensity < 0 && halfWayDensity < 0)){
                        lowerEndPointPos = posInDensityMap;
                        lowerEndPointDensity = halfWayDensity;
                    }else{
                        higherEndPointPos = posInDensityMap;
                        higherEndPointDensity = halfWayDensity;
                    }
                }
            }
            var divider = (higherEndPointDensity - lowerEndPointDensity);
            if(divider == 0) divider = 1;
            int t = (higherEndPointDensity << 8) / divider;
            int u = 0x0100 - t;
            float3 vertPos;
            float3 vertNormal;
            float3 N0 = helper.GetVertexNormal(lowerEndPointPos, 1);
            if(!lowerEndPointPos.Equals(higherEndPointPos)){
                float3 N1 = helper.GetVertexNormal(higherEndPointPos, 1);
                vertPos = (t * lowerEndPointPos + u * higherEndPointPos);
                vertNormal = (t * N0 + u * N1);
            }else{
                vertPos = lowerEndPointPos;
                vertNormal = N0;
            }
            vertPos = vertPos * 0.00390625f;
            vertNormal = math.normalize(vertNormal);
            var secondaryPos = vertPos;
            if(transitionOffset){
                var offsetVector = helper.GetTransitionDirection(vertPos);
                secondaryPos.x += ((1 - math.pow(vertNormal.x, 2)) * offsetVector.x + (-vertNormal.x*vertNormal.y) * offsetVector.y + (-vertNormal.x*vertNormal.z) * offsetVector.z);
                secondaryPos.y += ((-vertNormal.x*vertNormal.y) * offsetVector.x + (1-math.pow(vertNormal.y, 2)) * offsetVector.y + (-vertNormal.y*vertNormal.z) * offsetVector.z);
                secondaryPos.z += ((-vertNormal.x*vertNormal.z) * offsetVector.x + (-vertNormal.y*vertNormal.z) * offsetVector.y + (1-math.pow(vertNormal.z, 2)) * offsetVector.z);
            }
            
            //int vertexIndex = vertexCounter.Increment();
            
            var angle = math.dot(vertNormal, new float3(0,1,0));
            vertices.Add(new TransitionVertexData(vertPos, secondaryPos, near, vertNormal, math.clamp((1-angle),0,1)));
            int vertexIndex = vertices.Length - 1;
            return (ushort)vertexIndex;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetTransitionCase(TransitionCorners<short> transitionFaceSamples){
            var samples = transitionFaceSamples;
            int caseCode =          ((samples[0] >> 7) & 0x01)
                                    | ((samples[1] >> 6) & 0x02)
                                    | ((samples[2] >> 5) & 0x04)
                                    | (samples[3] & 0x80)
                                    | ((samples[4] << 1) & 0x100)
                                    | ((samples[5] >> 4) & 0x08)
                                    | ((samples[6] >> 1) & 0x40)
                                    | ((samples[7] >> 2) & 0x20)
                                    | ((samples[8] >> 3) & 0x10);
            return caseCode;
        }
        public TransitionCorners<short> GetTransitionFace(int3 voxelLocalPosition, int transitionDirectionIndex){
            TransitionCorners<short> result = new TransitionCorners<short>();
            for(int i = 0; i < 9; i++){
                result[i] = helper.SampleDensityRaw(voxelLocalPosition * helper.depthMultiplier + Tables.TransitionDirectionTable[transitionDirectionIndex * 9 + i] * helper.depthMultiplier / 2);
            }
            return result;
        }
    }
    [BurstCompile(FloatPrecision.Low, FloatMode.Fast)]
    public struct MeshJob : IJobFor
    {
        public NativeList<TransitionVertexData> vertices;
        public NativeList<ushort> triangles;
        public MeshingHelper helper;
        [WriteOnly] public NativeList<InstanceData> grassData;
        [WriteOnly] public NativeList<InstanceData> treeData;
        public TempBuffer vertexIndices;
        public Unity.Mathematics.Random rng;
        public NativeReference<float3x2> renderBounds;
        public void Execute(int index)
        {
            int3 voxelLocalPosition = Utils.IndexToXyz(index, ChunkManager.chunkResolution).xyz;


            VoxelCorners density = helper.GetDensities(voxelLocalPosition);

            int caseCode = ((density[0] >> 7) & 0x01)
                                    | ((density[1] >> 6) & 0x02)
                                    | ((density[2] >> 5) & 0x04)
                                    | ((density[3] >> 4) & 0x08)
                                    | ((density[4] >> 3) & 0x10)
                                    | ((density[5] >> 2) & 0x20)
                                    | ((density[6] >> 1) & 0x40)
                                    | (density[7] & 0x80);
            if ((caseCode ^ ((density[7] >> 7) & 0xFF)) == 0)
            {
                return;
            }
            byte cell = Tables.RegularCellClass[caseCode];
            var vertRowIndex = caseCode * 12;
            byte cellData = Tables.RegularCellData[cell][0];
            int vertexCount = (cellData >> 4);
            int triangleCount = (cellData & 0x0F);
            
            CellIndices cellIndices = new CellIndices();
            var currentCell = new ReuseCell(0);
            currentCell.caseIdx = (byte)caseCode;
            for (int i = 0; i < vertexCount; i++)
            {
                ushort edge = (ushort)(Tables.RegularVertexData[caseCode][i]);

                byte v0 = (byte)((edge >> 4) & 0x0F); //First Corner Index
                byte v1 = (byte)(edge & 0x0F); //Second Corner Index


                int3 cellDirection = DecodeCellIndices((byte)(edge >> 12));
                int t = (density[v1] << 8) / (density[v1] - density[v0]);
                int vertexEdgeIndex = (edge >> 8) & 0xF;
                //if ((t & 0x00FF) != 0){
                    if((edge >> 12) == 8){
                        // Vertex lies in the interior of the edge.
                        var newVertexIndex = CreateNewVertex((voxelLocalPosition + Tables.CubeCorners[v0]) * helper.depthMultiplier,(voxelLocalPosition + Tables.CubeCorners[v1]) * helper.depthMultiplier, density[v0], density[v1]);
                        
                        currentCell[vertexEdgeIndex] = newVertexIndex;
                        cellIndices[i] = newVertexIndex;
                    }else{
                        if((cellDirection.x == -1 && voxelLocalPosition.x == 0) || (cellDirection.y == -1 && voxelLocalPosition.y == 0) || (cellDirection.z == -1 && voxelLocalPosition.z == 0)){
                            cellIndices[i] = CreateNewVertex((voxelLocalPosition + Tables.CubeCorners[v0]) * helper.depthMultiplier,(voxelLocalPosition + Tables.CubeCorners[v1]) * helper.depthMultiplier, density[v0], density[v1]);
                            
                        }
                        else{
                            cellIndices[i] = GetCell(voxelLocalPosition + cellDirection)[vertexEdgeIndex];
                        }
                    }
                //}
                /*else if (t == 0 && v1 == 7){
                    // Vertex lies at the higher-numbered endpoint.
                    // This cell owns the vertex.
                    if(currentCell[1] == 0){
                        var newVertexIndex = CreateNewVertex((voxelLocalPosition + Tables.CubeCorners[v1]) * depthMultiplier,(voxelLocalPosition + Tables.CubeCorners[v1]) * depthMultiplier, density[v1], density[v1], false);
                        currentCell[1] = newVertexIndex;
                    }
                    cellIndices[i] = currentCell[1];
                }
                else{
                    byte edg = t == 0 ? v1 : v0;
                    cellDirection = Tables.CornerDirection[(byte)(edg)];
                    if((cellDirection.x == -1 && voxelLocalPosition.x == 0) || (cellDirection.y == -1 && voxelLocalPosition.y == 0) || (cellDirection.z == -1 && voxelLocalPosition.z == 0)){
                        cellIndices[i] = CreateNewVertex((voxelLocalPosition + Tables.CubeCorners[edg]) * depthMultiplier,(voxelLocalPosition + Tables.CubeCorners[edg]) * depthMultiplier, density[edg], density[edg], false);
                    }
                    else{
                        var prevCell = GetCell(voxelLocalPosition + cellDirection);
                        if(prevCell.caseIdx == 0 || prevCell.caseIdx == 255){
                            cellIndices[i] = CreateNewVertex((voxelLocalPosition + Tables.CubeCorners[edg]) * depthMultiplier,(voxelLocalPosition + Tables.CubeCorners[edg]) * depthMultiplier, density[edg], density[edg], false);
                        }
                        else{
                            cellIndices[i] = GetCell(voxelLocalPosition + cellDirection)[1];
                        }
                    }
                }*/
            }
            //var firstVert = vertices[cellIndices[0]];
            

            vertexIndices.vertexIndices[index] = currentCell;
            for(int i = 0; i < triangleCount; i++){
                //var idx = indexCounter.Increment() * 3;
                /*if(cellIndices[Tables.RegularCellData[cell][i * 3 + 1]].Equals(cellIndices[Tables.RegularCellData[cell][i * 3 + 2]]) ||
                    cellIndices[Tables.RegularCellData[cell][i * 3 + 1]].Equals(cellIndices[Tables.RegularCellData[cell][i * 3 + 3]]) ||
                    cellIndices[Tables.RegularCellData[cell][i * 3 + 2]].Equals(cellIndices[Tables.RegularCellData[cell][i * 3 + 3]])){
                        continue;
                    }*/
                TransitionVertexData v1 = vertices[cellIndices[Tables.RegularCellData[cell][i * 3 + 1]]];
                TransitionVertexData v2 = vertices[cellIndices[Tables.RegularCellData[cell][i * 3 + 2]]];
                TransitionVertexData v3 = vertices[cellIndices[Tables.RegularCellData[cell][i * 3 + 3]]];
                /*if(v1.Primary.Equals(v2.Primary) ||
                    v1.Primary.Equals(v3.Primary) ||
                    v2.Primary.Equals(v3.Primary)){
                    continue;
                }*/
                triangles.Add(cellIndices[Tables.RegularCellData[cell][i * 3 + 1]]);
                triangles.Add(cellIndices[Tables.RegularCellData[cell][i * 3 + 2]]);
                triangles.Add(cellIndices[Tables.RegularCellData[cell][i * 3 + 3]]);
                float3 midPoint = (v1.Primary + v2.Primary + v3.Primary) * 0.333f;
                float3 normal = (v1.normal + v2.normal + v3.normal) * 0.333f;
                if(v1.textureIndex < 0.1f && v2.textureIndex < 0.1f && v3.textureIndex < 0.1f && rng.NextFloat(0, 100) < 0.5f){
                    treeData.Add(new InstanceData(float4x4.TRS(midPoint + helper.chunkPos, Utils.AlignWithNormal(normal, rng), new float3(rng.NextFloat(1f, 2f)))));
                }
                else if(v1.textureIndex < 0.1f && v2.textureIndex < 0.1f && v3.textureIndex < 0.1f && rng.NextFloat(0, 100) < 45){
                    grassData.Add(new InstanceData(float4x4.TRS(midPoint + helper.chunkPos, Utils.AlignWithNormal(normal, rng), new float3(0.2f,0.2f, rng.NextFloat(0.3f, 0.5f)))));
                }
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        int3 DecodeCellIndices(byte idx){
            int3 value = new int3();
            value.z = -((idx >> 2) & 1);
            value.y = -((idx >> 1) & 1);
            value.x = -(idx & 1);
            return value;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ReuseCell GetCell(int3 voxelLocalPosition){
            return vertexIndices.vertexIndices[Utils.XyzToIndex(voxelLocalPosition, ChunkManager.chunkResolution)];
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ushort CreateNewVertex(int3 lowerEndPointPos, int3 higherEndPointPos, sbyte lowerEndPointDensity, sbyte higherEndPointDensity, bool surfaceShift = true, bool transitionOffset = true){
            //Surface shift
            int near = helper.GetVertexNearEdgeMask((float3)(lowerEndPointPos + higherEndPointPos) * 0.5f);
            if(surfaceShift && near == 0 && helper.depthMultiplier != 1){
                int3 posInDensityMap = new int3(0);
                int3 oldPos = new int3(-1);
                while(!oldPos.Equals(posInDensityMap)){
                    oldPos = posInDensityMap;
                    posInDensityMap = ((lowerEndPointPos) + (higherEndPointPos)) / 2;
                    sbyte halfWayDensity = helper.SampleDensityRaw(posInDensityMap);
                    if((lowerEndPointDensity >= 0 && halfWayDensity >= 0) || (lowerEndPointDensity < 0 && halfWayDensity < 0)){
                        lowerEndPointPos = posInDensityMap;
                        lowerEndPointDensity = halfWayDensity;
                    }else{
                        higherEndPointPos = posInDensityMap;
                        higherEndPointDensity = halfWayDensity;
                    }
                }
            }
            float3 vertPos;
            float3 vertNormal;
            float3 N0 = helper.GetVertexNormal(lowerEndPointPos, 1);
            if(!lowerEndPointPos.Equals(higherEndPointPos)){
                int t = (higherEndPointDensity << 8) / (higherEndPointDensity - lowerEndPointDensity);
                int u = 0x0100 - t;
                float3 N1 = helper.GetVertexNormal(higherEndPointPos, 1);
                vertPos = (t * lowerEndPointPos + u * higherEndPointPos);
                vertPos = vertPos * 0.00390625f;
                vertNormal = (t * N0 + u * N1);
            }else{
                vertPos = lowerEndPointPos;
                vertNormal = N0;
            }
            vertNormal = math.normalize(vertNormal);
            float3 secondaryPos = vertPos;
            if(transitionOffset){
                var offsetVector = helper.GetTransitionDirection(vertPos);
                secondaryPos.x += ((1 - math.pow(vertNormal.x, 2)) * offsetVector.x + (-vertNormal.x*vertNormal.y) * offsetVector.y + (-vertNormal.x*vertNormal.z) * offsetVector.z);
                secondaryPos.y += ((-vertNormal.x*vertNormal.y) * offsetVector.x + (1-math.pow(vertNormal.y, 2)) * offsetVector.y + (-vertNormal.y*vertNormal.z) * offsetVector.z);
                secondaryPos.z += ((-vertNormal.x*vertNormal.z) * offsetVector.x + (-vertNormal.y*vertNormal.z) * offsetVector.y + (1-math.pow(vertNormal.z, 2)) * offsetVector.z);
            }
            //int vertexIndex = vertexCounter.Increment();
            var bounds = renderBounds.Value;
            bounds.c0 = math.min(vertPos, bounds.c0);
            bounds.c1 = math.max(vertPos, bounds.c1);
            renderBounds.Value = bounds;
            var angle = math.dot(vertNormal, new float3(0,1,0));
            vertices.Add(new TransitionVertexData(vertPos, secondaryPos, near, vertNormal, math.clamp((1-angle),0,1)));
            int vertexIndex = vertices.Length - 1;
            return (ushort)vertexIndex;
        }

    }
    public struct MeshingHelper{
        public MeshingHelper(DensityData densities, DensityCacheInstance cache, int3 chunkPos, float negativeDepthMultiplier, int depthMultiplier){
            this.densities = densities;
            this.cache = cache;
            this.chunkPos = chunkPos;
            this.negativeDepthMultiplier = negativeDepthMultiplier;
            this.depthMultiplier = depthMultiplier;
        }
        [ReadOnly] public DensityData densities;
        public DensityCacheInstance cache;
        [ReadOnly] public int3 chunkPos;
        [ReadOnly] public float negativeDepthMultiplier;
        [ReadOnly] public int depthMultiplier;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetVertexNearEdgeMask(float3 vertPos){
            return ((vertPos.x == depthMultiplier * ChunkManager.chunkResolution ? 0b_0000_0001 : 0) 
                | (vertPos.x == 0 ? 0b_0000_0010 : 0) 
                | (vertPos.y == depthMultiplier * ChunkManager.chunkResolution ? 0b_0000_0100 : 0) 
                | (vertPos.y == 0 ? 0b_0000_1000 : 0) 
                | (vertPos.z == depthMultiplier * ChunkManager.chunkResolution ? 0b_0001_0000 : 0) 
                | (vertPos.z == 0 ? 0b_0010_0000 : 0));
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float3 GetTransitionDirection(float3 vertPos){
            var offsetVector = new float3(0);
            var highFence = depthMultiplier*(ChunkManager.chunkResolution-1);
            
            bool3x2 skirtDirections = new bool3x2();
            skirtDirections.c0.x = vertPos.x > highFence;
            skirtDirections.c0.y = vertPos.y > highFence;
            skirtDirections.c0.z = vertPos.z > highFence;
            skirtDirections.c1.x = vertPos.x < depthMultiplier;
            skirtDirections.c1.y = vertPos.y < depthMultiplier;
            skirtDirections.c1.z = vertPos.z < depthMultiplier;
            
            offsetVector += math.select(new float3(0), (ChunkManager.chunkResolution - 1 - negativeDepthMultiplier * vertPos) * (depthMultiplier / 2), skirtDirections.c0);
            offsetVector += math.select(new float3(0), (1 - negativeDepthMultiplier * vertPos) * (depthMultiplier / 2), skirtDirections.c1);
            return offsetVector;
        }
        public VoxelCorners GetDensities(int3 localPosition)
        {
            VoxelCorners densities = new VoxelCorners();
            for (int i = 0; i < 8; i++)
            {
                int3 voxelCorner = localPosition + Tables.CubeCorners[i];
                var dens = SampleDensity(voxelCorner);
                densities[i] = dens;
            }

            return densities;
        }
        public float3 GetVertexNormal(int3 voxelLocalPosition, int step){
            //if(voxelLocalPosition.x >= ChunkManager.chunkResolution || voxelLocalPosition.y >= ChunkManager.chunkResolution || voxelLocalPosition.z >= ChunkManager.chunkResolution) return new float3(0);
            float nx = (SampleDensityRaw(voxelLocalPosition + new int3(step, 0, 0)) - SampleDensityRaw(voxelLocalPosition - new int3(step, 0, 0)));
            float ny = (SampleDensityRaw(voxelLocalPosition + new int3(0, step, 0)) - SampleDensityRaw(voxelLocalPosition - new int3(0, step, 0)));
            float nz = (SampleDensityRaw(voxelLocalPosition + new int3(0, 0, step)) - SampleDensityRaw(voxelLocalPosition - new int3(0, 0, step)));
            return (new float3(nx,ny,nz));
        }
        public sbyte SampleDensity(int3 pos){
            return GetDensityWithCache(pos * depthMultiplier + chunkPos);
        }
        public sbyte SampleDensityRaw(int3 pos){
            return GetDensityWithCache(pos + chunkPos);
        }
        private sbyte GetDensityWithCache(int3 worldPos){
            //if(math.all(worldPos > cache.cachedPos & worldPos < cache.cachedPos + ChunkManager.chunkResolution)) chunkPos = cache.cachedPos;
            int3 chunkPos = Utils.WorldPosToChunkPos(worldPos);

            if(chunkPos.Equals(cache.lastEmptyChunk)) {return 127;}
            if(chunkPos.Equals(cache.lastFullChunk)) {return -127;}
            if(!cache.cachedPos.Equals(chunkPos)){
                if(densities.ContainsPos(chunkPos)){
                    cache.cachedDensityMap = densities.GetDensityMap(chunkPos);
                    cache.cachedPos = chunkPos;
                }else if(densities.IsEmpty(chunkPos)) {cache.lastEmptyChunk = chunkPos; return 127;}
                else if(densities.IsFull(chunkPos)) {cache.lastFullChunk = chunkPos; return -127;}
                else{
                    return TerraxelGenerated.GenerateDensity(worldPos);
                }
            }
            int index = Utils.XyzToIndex(worldPos - chunkPos, ChunkManager.chunkResolution);
            unsafe{
            sbyte* ptr = (sbyte*)cache.cachedDensityMap;
            return *(ptr + index);
            }
        }
    }
    public struct ChunkColliderBakeJob : IJob
    {
        [ReadOnly] public int meshId;
        public void Execute()
        {
            MeshColliderCookingOptions options = MeshColliderCookingOptions.CookForFasterSimulation | MeshColliderCookingOptions.WeldColocatedVertices | MeshColliderCookingOptions.UseFastMidphase | MeshColliderCookingOptions.EnableMeshCleaning;
            Physics.BakeMesh(meshId, false, options);
        }
    }
    //Calculate noise in jobs
    
    /*[BurstCompile(FloatPrecision.Low, FloatMode.Fast)]
    public struct NoiseJob : IJobParallelFor
    {
        [ReadOnly] public float3 offset;
        [ReadOnly] public int depthMultiplier;
        [ReadOnly] public int size;
        [NativeDisableParallelForRestriction, WriteOnly]
        public DensityResultData data;
        [ReadOnly] public NoiseProperties noiseProperties;
        [ReadOnly] public bool allowEmptyOrFull;

        public void Execute(int index)
        {
            var value = TerraxelGenerated.GenerateDensity(Utils.IndexToXyz(index, size).xyz * depthMultiplier + offset);
            data.densityMap[index] = value;
            if(!allowEmptyOrFull) return;
            if(value != 127){
                data.isEmpty.Value = false;
            }
            if(value != -127){
                data.isFull.Value = false;
            }
        }
    }*/
    
    [BurstCompile(FloatPrecision.Low, FloatMode.Fast)]
    public struct NoiseJob2D : IJobParallelFor
    {
        [ReadOnly] public float2 offset;
        [ReadOnly] public int depthMultiplier;
        [ReadOnly] public int size;
        [WriteOnly, NativeDisableParallelForRestriction] public NativeArray<float> heightMap;
        public void Execute(int index)
        {
            var value = TerraxelGenerated.GenerateDensity(Utils.IndexToXz(index, size) * depthMultiplier + offset);
            //TODO: Fix 2d 3d transition gaps
            /*float remainder = value - (int)value;
            remainder = math.round(remainder * 127) / 127;
            value = (int)value + remainder;*/
            heightMap[index] = value;
        }
        
    }
    /*[BurstCompile]
    public struct GrassJob : IJobFor
    {
        [ReadOnly] public float2 offset;
        [ReadOnly] public int depthMultiplier;
        [ReadOnly] public int size;
        [ReadOnly] public NoiseProperties noiseProperties;
        public Unity.Mathematics.Random rng;
        [WriteOnly] public NativeList<GrassInstanceData> data;
        public void Execute(int index){
            var pos = Utils.IndexToXz(index, size) * depthMultiplier + offset;
            var value = TerraxelGenerated.GenerateDensity(pos);
            var chance = rng.NextFloat(0f, 100f);
            if(value > chance){
                data.Add(Matrix4x4.TRS(new float3(pos.x, value, pos.y), math.quaternion(0,0,0,1), (float3)1f));
            }
        }
    }*/

    internal class Tables
    {
        public static readonly int3[] CornerDirection = {
            new int3(-1, -1, -1),
            new int3(0, -1, -1),
            new int3(-1, 0, -1),
            new int3(0, 0, -1),
            new int3(0, -1, -1),
            new int3(0, -1, 0),
            new int3(-1, 0, 0),
            new int3(0, 0, 0),
        };
        public static readonly byte[] TransitionEdgeRemap = {
            0,1,2,3,4,5,6,7,8,0,2,6,8
        };
        public static readonly int3[] TransitionDirectionTable = {
            //order: front, back, right, left, up, down
            new int3(2,0,0), new int3(2,0,1), new int3(2,0,2), new int3(2,1,0), new int3(2,1,1), new int3(2,1,2), new int3(2,2,0),new int3(2,2,1),new int3(2,2,2),
            new int3(0,0,0), new int3(0,0,1), new int3(0,0,2), new int3(0,1,0), new int3(0,1,1), new int3(0,1,2), new int3(0,2,0),new int3(0,2,1),new int3(0,2,2),
            new int3(0,0,2),new int3(1,0,2),new int3(2,0,2),new int3(0,1,2),new int3(1,1,2),new int3(2,1,2),new int3(0,2,2),new int3(1,2,2),new int3(2,2,2),
            new int3(0,0,0),new int3(1,0,0),new int3(2,0,0),new int3(0,1,0),new int3(1,1,0),new int3(2,1,0),new int3(0,2,0),new int3(1,2,0),new int3(2,2,0),
            new int3(0,2,0),new int3(0,2,1),new int3(0,2,2),new int3(1,2,0),new int3(1,2,1),new int3(1,2,2),new int3(2,2,0),new int3(2,2,1),new int3(2,2,2),
            new int3(0,0,0),new int3(0,0,1),new int3(0,0,2),new int3(1,0,0),new int3(1,0,1),new int3(1,0,2),new int3(2,0,0),new int3(2,0,1),new int3(2,0,2),
        };
        /// <summary>
        /// Lookup table for how the edges should be connected
        /// </summary>
        public static readonly int[] EdgeIndexTable =
        {
            0, 1,
            1, 2,
            2, 3,
            3, 0,
            4, 5,
            5, 6,
            6, 7,
            7, 4,
            0, 4,
            1, 5,
            2, 6,
            3, 7
        };
        public static readonly int3[] CubeCorners =
        {
            new int3(0, 0, 0),
            new int3(1, 0, 0),
            new int3(0, 1, 0),
            new int3(1, 1, 0),
            new int3(0, 0, 1),
            new int3(1, 0, 1),
            new int3(0, 1, 1),
            new int3(1, 1, 1)
        };

        public static readonly byte[] RegularCellClass =
        {
            0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
            0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
            0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
            0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
            0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
            0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
            0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
            0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
            0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
            0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
            0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
            0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
            0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
            0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
            0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
            0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00

        };

         public static readonly byte[][] RegularCellData = new byte[][] {
            	new byte[] {0x00},
                new byte[] {0x31, 0, 1, 2},
                new byte[] {0x62, 0, 1, 2, 3, 4, 5},
                new byte[] {0x42, 0, 1, 2, 0, 2, 3},
                new byte[] {0x53, 0, 1, 4, 1, 3, 4, 1, 2, 3},
                new byte[] {0x73, 0, 1, 2, 0, 2, 3, 4, 5, 6},
                new byte[] {0x93, 0, 1, 2, 3, 4, 5, 6, 7, 8},
                new byte[] {0x84, 0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7},
                new byte[] {0x84, 0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7},
                new byte[] {0xC4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
                new byte[] {0x64, 0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3},
                new byte[] {0x64, 0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2},
                new byte[] {0x64, 0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3},
                new byte[] {0x64, 0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5},
                new byte[] {0x75, 0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6},
                new byte[] {0x95, 0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8}
    };

        public static readonly ushort[][] RegularVertexData = new ushort[][] {
        new ushort[] {},
	    new ushort[] {0x6201, 0x5102, 0x3304},
	    new ushort[] {0x6201, 0x2315, 0x4113},
	    new ushort[] {0x5102, 0x3304, 0x2315, 0x4113},
	    new ushort[] {0x5102, 0x4223, 0x1326},
	    new ushort[] {0x3304, 0x6201, 0x4223, 0x1326},
	    new ushort[] {0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x4223, 0x1326, 0x3304, 0x2315, 0x4113},
	    new ushort[] {0x4113, 0x8337, 0x4223},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x6201, 0x2315, 0x8337, 0x4223},
	    new ushort[] {0x5102, 0x3304, 0x2315, 0x8337, 0x4223},
	    new ushort[] {0x5102, 0x4113, 0x8337, 0x1326},
	    new ushort[] {0x4113, 0x8337, 0x1326, 0x3304, 0x6201},
	    new ushort[] {0x6201, 0x2315, 0x8337, 0x1326, 0x5102},
	    new ushort[] {0x3304, 0x2315, 0x8337, 0x1326},
	    new ushort[] {0x3304, 0x1146, 0x2245},
	    new ushort[] {0x6201, 0x5102, 0x1146, 0x2245},
	    new ushort[] {0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x2315, 0x4113, 0x5102, 0x1146, 0x2245},
	    new ushort[] {0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x1146, 0x2245, 0x6201, 0x4223, 0x1326},
	    new ushort[] {0x3304, 0x1146, 0x2245, 0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x4113},
	    new ushort[] {0x4223, 0x4113, 0x8337, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x4223, 0x6201, 0x2315, 0x8337, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x4223, 0x8337, 0x2315, 0x2245, 0x1146, 0x5102},
	    new ushort[] {0x5102, 0x4113, 0x8337, 0x1326, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x4113, 0x8337, 0x1326, 0x1146, 0x2245, 0x6201},
	    new ushort[] {0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x2245, 0x2315, 0x8337, 0x1326, 0x1146},
	    new ushort[] {0x2315, 0x2245, 0x8157},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x4113, 0x6201, 0x2245, 0x8157},
	    new ushort[] {0x2245, 0x8157, 0x4113, 0x5102, 0x3304},
	    new ushort[] {0x5102, 0x4223, 0x1326, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x6201, 0x4223, 0x1326, 0x3304, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x6201, 0x2245, 0x8157, 0x4113, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x4223, 0x1326, 0x3304, 0x2245, 0x8157, 0x4113},
	    new ushort[] {0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x8337, 0x4223, 0x6201, 0x2245, 0x8157},
	    new ushort[] {0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x4223},
	    new ushort[] {0x5102, 0x4113, 0x8337, 0x1326, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x5102, 0x1326, 0x8337, 0x8157, 0x2245, 0x6201},
	    new ushort[] {0x8157, 0x8337, 0x1326, 0x3304, 0x2245},
	    new ushort[] {0x2315, 0x3304, 0x1146, 0x8157},
	    new ushort[] {0x6201, 0x5102, 0x1146, 0x8157, 0x2315},
	    new ushort[] {0x3304, 0x1146, 0x8157, 0x4113, 0x6201},
	    new ushort[] {0x4113, 0x5102, 0x1146, 0x8157},
	    new ushort[] {0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x1326, 0x4223, 0x6201, 0x2315, 0x8157, 0x1146},
	    new ushort[] {0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x1326, 0x1146, 0x8157, 0x4113, 0x4223},
	    new ushort[] {0x2315, 0x3304, 0x1146, 0x8157, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x3304, 0x1146, 0x8157, 0x8337, 0x4223, 0x6201},
	    new ushort[] {0x4223, 0x5102, 0x1146, 0x8157, 0x8337},
	    new ushort[] {0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4113, 0x8337, 0x1326},
	    new ushort[] {0x6201, 0x4113, 0x8337, 0x1326, 0x1146, 0x8157, 0x2315},
	    new ushort[] {0x6201, 0x3304, 0x1146, 0x8157, 0x8337, 0x1326, 0x5102},
	    new ushort[] {0x1326, 0x1146, 0x8157, 0x8337},
	    new ushort[] {0x1326, 0x8267, 0x1146},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x6201, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x5102, 0x3304, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x5102, 0x4223, 0x8267, 0x1146},
	    new ushort[] {0x3304, 0x6201, 0x4223, 0x8267, 0x1146},
	    new ushort[] {0x5102, 0x4223, 0x8267, 0x1146, 0x6201, 0x2315, 0x4113},
	    new ushort[] {0x1146, 0x8267, 0x4223, 0x4113, 0x2315, 0x3304},
	    new ushort[] {0x4113, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x6201, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x8267, 0x1146, 0x5102, 0x4113, 0x8337},
	    new ushort[] {0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304},
	    new ushort[] {0x6201, 0x2315, 0x8337, 0x8267, 0x1146, 0x5102},
	    new ushort[] {0x1146, 0x3304, 0x2315, 0x8337, 0x8267},
	    new ushort[] {0x3304, 0x1326, 0x8267, 0x2245},
	    new ushort[] {0x1326, 0x8267, 0x2245, 0x6201, 0x5102},
	    new ushort[] {0x3304, 0x1326, 0x8267, 0x2245, 0x6201, 0x2315, 0x4113},
	    new ushort[] {0x1326, 0x8267, 0x2245, 0x2315, 0x4113, 0x5102},
	    new ushort[] {0x5102, 0x4223, 0x8267, 0x2245, 0x3304},
	    new ushort[] {0x6201, 0x4223, 0x8267, 0x2245},
	    new ushort[] {0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x6201, 0x2315, 0x4113},
	    new ushort[] {0x4113, 0x4223, 0x8267, 0x2245, 0x2315},
	    new ushort[] {0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x6201, 0x2315, 0x8337},
	    new ushort[] {0x5102, 0x1326, 0x8267, 0x2245, 0x2315, 0x8337, 0x4223},
	    new ushort[] {0x3304, 0x2245, 0x8267, 0x8337, 0x4113, 0x5102},
	    new ushort[] {0x8337, 0x8267, 0x2245, 0x6201, 0x4113},
	    new ushort[] {0x5102, 0x6201, 0x2315, 0x8337, 0x8267, 0x2245, 0x3304},
	    new ushort[] {0x2315, 0x8337, 0x8267, 0x2245},
	    new ushort[] {0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x6201, 0x2245, 0x8157, 0x4113, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x4223, 0x8267, 0x1146, 0x5102, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x4223, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x4113},
	    new ushort[] {0x3304, 0x2245, 0x8157, 0x4113, 0x4223, 0x8267, 0x1146},
	    new ushort[] {0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x4223, 0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x1326, 0x8267, 0x1146},
	    new ushort[] {0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x2315, 0x2245, 0x8157},
	    new ushort[] {0x8337, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157},
	    new ushort[] {0x3304, 0x2245, 0x8157, 0x8337, 0x8267, 0x1146},
	    new ushort[] {0x8157, 0x2315, 0x3304, 0x1326, 0x8267},
	    new ushort[] {0x8267, 0x8157, 0x2315, 0x6201, 0x5102, 0x1326},
	    new ushort[] {0x8267, 0x1326, 0x3304, 0x6201, 0x4113, 0x8157},
	    new ushort[] {0x8267, 0x8157, 0x4113, 0x5102, 0x1326},
	    new ushort[] {0x5102, 0x4223, 0x8267, 0x8157, 0x2315, 0x3304},
	    new ushort[] {0x2315, 0x6201, 0x4223, 0x8267, 0x8157},
	    new ushort[] {0x3304, 0x5102, 0x4223, 0x8267, 0x8157, 0x4113, 0x6201},
	    new ushort[] {0x4113, 0x4223, 0x8267, 0x8157},
	    new ushort[] {0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
	    new ushort[] {0x8157, 0x8337, 0x4223, 0x6201, 0x3304, 0x1326, 0x8267},
	    new ushort[] {0x5102, 0x1326, 0x8267, 0x8157, 0x8337, 0x4223},
	    new ushort[] {0x8267, 0x8157, 0x2315, 0x3304, 0x5102, 0x4113, 0x8337},
	    new ushort[] {0x6201, 0x4113, 0x8337, 0x8267, 0x8157, 0x2315},
	    new ushort[] {0x6201, 0x3304, 0x5102, 0x8337, 0x8267, 0x8157},
	    new ushort[] {0x8337, 0x8267, 0x8157},
	    new ushort[] {0x8337, 0x8157, 0x8267},
	    new ushort[] {0x6201, 0x5102, 0x3304, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x6201, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x5102, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x4113, 0x8157, 0x8267, 0x4223},
	    new ushort[] {0x4223, 0x4113, 0x8157, 0x8267, 0x6201, 0x5102, 0x3304},
	    new ushort[] {0x8157, 0x8267, 0x4223, 0x6201, 0x2315},
	    new ushort[] {0x3304, 0x2315, 0x8157, 0x8267, 0x4223, 0x5102},
	    new ushort[] {0x1326, 0x5102, 0x4113, 0x8157, 0x8267},
	    new ushort[] {0x8157, 0x4113, 0x6201, 0x3304, 0x1326, 0x8267},
	    new ushort[] {0x1326, 0x5102, 0x6201, 0x2315, 0x8157, 0x8267},
	    new ushort[] {0x8267, 0x1326, 0x3304, 0x2315, 0x8157},
	    new ushort[] {0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x6201, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x4113, 0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x8337, 0x8157, 0x8267},
	    new ushort[] {0x4223, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8157, 0x8267},
	    new ushort[] {0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x1146, 0x2245},
	    new ushort[] {0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x1326, 0x1146, 0x2245, 0x6201, 0x4113, 0x8157, 0x8267},
	    new ushort[] {0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x1326, 0x3304, 0x1146, 0x2245},
	    new ushort[] {0x1326, 0x1146, 0x2245, 0x2315, 0x8157, 0x8267},
	    new ushort[] {0x2315, 0x2245, 0x8267, 0x8337},
	    new ushort[] {0x2315, 0x2245, 0x8267, 0x8337, 0x6201, 0x5102, 0x3304},
	    new ushort[] {0x4113, 0x6201, 0x2245, 0x8267, 0x8337},
	    new ushort[] {0x5102, 0x4113, 0x8337, 0x8267, 0x2245, 0x3304},
	    new ushort[] {0x2315, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x2315, 0x2245, 0x8267},
	    new ushort[] {0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x4113, 0x4223, 0x1326, 0x3304, 0x2245, 0x8267, 0x8337},
	    new ushort[] {0x2315, 0x2245, 0x8267, 0x4223, 0x4113},
	    new ushort[] {0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x6201, 0x5102, 0x3304},
	    new ushort[] {0x6201, 0x2245, 0x8267, 0x4223},
	    new ushort[] {0x3304, 0x2245, 0x8267, 0x4223, 0x5102},
	    new ushort[] {0x5102, 0x4113, 0x2315, 0x2245, 0x8267, 0x1326},
	    new ushort[] {0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x3304, 0x6201},
	    new ushort[] {0x5102, 0x6201, 0x2245, 0x8267, 0x1326},
	    new ushort[] {0x3304, 0x2245, 0x8267, 0x1326},
	    new ushort[] {0x8267, 0x8337, 0x2315, 0x3304, 0x1146},
	    new ushort[] {0x5102, 0x1146, 0x8267, 0x8337, 0x2315, 0x6201},
	    new ushort[] {0x3304, 0x1146, 0x8267, 0x8337, 0x4113, 0x6201},
	    new ushort[] {0x8337, 0x4113, 0x5102, 0x1146, 0x8267},
	    new ushort[] {0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x4223, 0x1326},
	    new ushort[] {0x8267, 0x8337, 0x4113, 0x6201, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
	    new ushort[] {0x4113, 0x4223, 0x1326, 0x1146, 0x8267, 0x8337},
	    new ushort[] {0x3304, 0x2315, 0x4113, 0x4223, 0x8267, 0x1146},
	    new ushort[] {0x2315, 0x6201, 0x5102, 0x1146, 0x8267, 0x4223, 0x4113},
	    new ushort[] {0x1146, 0x8267, 0x4223, 0x6201, 0x3304},
	    new ushort[] {0x5102, 0x1146, 0x8267, 0x4223},
	    new ushort[] {0x8267, 0x1326, 0x5102, 0x4113, 0x2315, 0x3304, 0x1146},
	    new ushort[] {0x6201, 0x4113, 0x2315, 0x1326, 0x1146, 0x8267},
	    new ushort[] {0x6201, 0x3304, 0x1146, 0x8267, 0x1326, 0x5102},
	    new ushort[] {0x1326, 0x1146, 0x8267},
	    new ushort[] {0x1326, 0x8337, 0x8157, 0x1146},
	    new ushort[] {0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
	    new ushort[] {0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x2315, 0x4113},
	    new ushort[] {0x4113, 0x5102, 0x3304, 0x2315, 0x1326, 0x8337, 0x8157, 0x1146},
	    new ushort[] {0x8337, 0x8157, 0x1146, 0x5102, 0x4223},
	    new ushort[] {0x6201, 0x4223, 0x8337, 0x8157, 0x1146, 0x3304},
	    new ushort[] {0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x6201, 0x2315, 0x4113},
	    new ushort[] {0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x2315, 0x4113},
	    new ushort[] {0x4223, 0x4113, 0x8157, 0x1146, 0x1326},
	    new ushort[] {0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
	    new ushort[] {0x1146, 0x8157, 0x2315, 0x6201, 0x4223, 0x1326},
	    new ushort[] {0x4223, 0x5102, 0x3304, 0x2315, 0x8157, 0x1146, 0x1326},
	    new ushort[] {0x4113, 0x8157, 0x1146, 0x5102},
	    new ushort[] {0x6201, 0x4113, 0x8157, 0x1146, 0x3304},
	    new ushort[] {0x2315, 0x8157, 0x1146, 0x5102, 0x6201},
	    new ushort[] {0x2315, 0x8157, 0x1146, 0x3304},
	    new ushort[] {0x2245, 0x3304, 0x1326, 0x8337, 0x8157},
	    new ushort[] {0x6201, 0x2245, 0x8157, 0x8337, 0x1326, 0x5102},
	    new ushort[] {0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x6201, 0x2315, 0x4113},
	    new ushort[] {0x2245, 0x2315, 0x4113, 0x5102, 0x1326, 0x8337, 0x8157},
	    new ushort[] {0x4223, 0x8337, 0x8157, 0x2245, 0x3304, 0x5102},
	    new ushort[] {0x8157, 0x2245, 0x6201, 0x4223, 0x8337},
	    new ushort[] {0x2245, 0x3304, 0x5102, 0x4223, 0x8337, 0x8157, 0x4113, 0x6201, 0x2315},
	    new ushort[] {0x4223, 0x8337, 0x8157, 0x2245, 0x2315, 0x4113},
	    new ushort[] {0x4113, 0x8157, 0x2245, 0x3304, 0x1326, 0x4223},
	    new ushort[] {0x1326, 0x4223, 0x4113, 0x8157, 0x2245, 0x6201, 0x5102},
	    new ushort[] {0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x6201, 0x2315},
	    new ushort[] {0x5102, 0x1326, 0x4223, 0x2315, 0x8157, 0x2245},
	    new ushort[] {0x3304, 0x5102, 0x4113, 0x8157, 0x2245},
	    new ushort[] {0x4113, 0x8157, 0x2245, 0x6201},
	    new ushort[] {0x5102, 0x6201, 0x2315, 0x8157, 0x2245, 0x3304},
	    new ushort[] {0x2315, 0x8157, 0x2245},
	    new ushort[] {0x1146, 0x1326, 0x8337, 0x2315, 0x2245},
	    new ushort[] {0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
	    new ushort[] {0x6201, 0x2245, 0x1146, 0x1326, 0x8337, 0x4113},
	    new ushort[] {0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x5102, 0x3304},
	    new ushort[] {0x5102, 0x1146, 0x2245, 0x2315, 0x8337, 0x4223},
	    new ushort[] {0x1146, 0x3304, 0x6201, 0x4223, 0x8337, 0x2315, 0x2245},
	    new ushort[] {0x8337, 0x4113, 0x6201, 0x2245, 0x1146, 0x5102, 0x4223},
	    new ushort[] {0x4223, 0x8337, 0x4113, 0x3304, 0x2245, 0x1146},
	    new ushort[] {0x4113, 0x2315, 0x2245, 0x1146, 0x1326, 0x4223},
	    new ushort[] {0x1146, 0x1326, 0x4223, 0x4113, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
	    new ushort[] {0x1326, 0x4223, 0x6201, 0x2245, 0x1146},
	    new ushort[] {0x4223, 0x5102, 0x3304, 0x2245, 0x1146, 0x1326},
	    new ushort[] {0x2245, 0x1146, 0x5102, 0x4113, 0x2315},
	    new ushort[] {0x4113, 0x2315, 0x2245, 0x1146, 0x3304, 0x6201},
	    new ushort[] {0x6201, 0x2245, 0x1146, 0x5102},
	    new ushort[] {0x3304, 0x2245, 0x1146},
	    new ushort[] {0x3304, 0x1326, 0x8337, 0x2315},
	    new ushort[] {0x5102, 0x1326, 0x8337, 0x2315, 0x6201},
	    new ushort[] {0x6201, 0x3304, 0x1326, 0x8337, 0x4113},
	    new ushort[] {0x5102, 0x1326, 0x8337, 0x4113},
	    new ushort[] {0x4223, 0x8337, 0x2315, 0x3304, 0x5102},
	    new ushort[] {0x6201, 0x4223, 0x8337, 0x2315},
	    new ushort[] {0x3304, 0x5102, 0x4223, 0x8337, 0x4113, 0x6201},
	    new ushort[] {0x4113, 0x4223, 0x8337},
	    new ushort[] {0x4113, 0x2315, 0x3304, 0x1326, 0x4223},
	    new ushort[] {0x1326, 0x4223, 0x4113, 0x2315, 0x6201, 0x5102},
	    new ushort[] {0x3304, 0x1326, 0x4223, 0x6201},
	    new ushort[] {0x5102, 0x1326, 0x4223},
	    new ushort[] {0x5102, 0x4113, 0x2315, 0x3304},
	    new ushort[] {0x6201, 0x4113, 0x2315},
	    new ushort[] {0x6201, 0x3304, 0x5102},
	    new ushort[] {}
    };

    public static readonly byte[] transitionCellClass = new byte[512]
    {
        0x00, 0x01, 0x02, 0x84, 0x01, 0x05, 0x04, 0x04, 0x02, 0x87, 0x09, 0x8C, 0x84, 0x0B, 0x05, 0x05,
        0x01, 0x08, 0x07, 0x8D, 0x05, 0x0F, 0x8B, 0x0B, 0x04, 0x0D, 0x0C, 0x1C, 0x04, 0x8B, 0x85, 0x85,
        0x02, 0x07, 0x09, 0x8C, 0x87, 0x10, 0x0C, 0x0C, 0x09, 0x12, 0x15, 0x9A, 0x8C, 0x19, 0x90, 0x10,
        0x84, 0x8D, 0x8C, 0x9C, 0x0B, 0x9D, 0x0F, 0x0F, 0x05, 0x1B, 0x10, 0xAC, 0x05, 0x0F, 0x8B, 0x0B,
        0x01, 0x05, 0x87, 0x0B, 0x08, 0x0F, 0x0D, 0x8B, 0x07, 0x10, 0x12, 0x19, 0x8D, 0x9D, 0x1B, 0x0F,
        0x05, 0x0F, 0x10, 0x9D, 0x0F, 0x1E, 0x1D, 0xA1, 0x8B, 0x1D, 0x99, 0x32, 0x0B, 0xA1, 0x8F, 0x94,
        0x04, 0x8B, 0x0C, 0x0F, 0x0D, 0x1D, 0x1C, 0x8F, 0x0C, 0x99, 0x1A, 0x31, 0x1C, 0x32, 0x2C, 0xA7,
        0x04, 0x0B, 0x0C, 0x0F, 0x8B, 0xA1, 0x8F, 0x96, 0x85, 0x8F, 0x90, 0x27, 0x85, 0x94, 0x8B, 0x8A,
        0x02, 0x04, 0x09, 0x05, 0x07, 0x8B, 0x0C, 0x85, 0x09, 0x0C, 0x15, 0x90, 0x8C, 0x0F, 0x10, 0x8B,
        0x87, 0x0D, 0x12, 0x1B, 0x10, 0x1D, 0x99, 0x8F, 0x0C, 0x1C, 0x1A, 0x2C, 0x0C, 0x8F, 0x90, 0x8B,
        0x09, 0x0C, 0x15, 0x10, 0x12, 0x99, 0x1A, 0x90, 0x15, 0x1A, 0x23, 0x30, 0x9A, 0x31, 0x30, 0x19,
        0x8C, 0x1C, 0x9A, 0xAC, 0x19, 0x32, 0x31, 0x27, 0x90, 0x2C, 0x30, 0x29, 0x10, 0xA7, 0x19, 0x24,
        0x84, 0x04, 0x8C, 0x05, 0x8D, 0x0B, 0x1C, 0x85, 0x8C, 0x0C, 0x9A, 0x10, 0x9C, 0x0F, 0xAC, 0x0B,
        0x0B, 0x8B, 0x19, 0x0F, 0x9D, 0xA1, 0x32, 0x94, 0x0F, 0x8F, 0x31, 0xA7, 0x0F, 0x96, 0x27, 0x8A,
        0x05, 0x85, 0x90, 0x8B, 0x1B, 0x8F, 0x2C, 0x8B, 0x10, 0x90, 0x30, 0x19, 0xAC, 0x27, 0x29, 0x24,
        0x05, 0x85, 0x10, 0x0B, 0x0F, 0x94, 0xA7, 0x8A, 0x8B, 0x8B, 0x19, 0x24, 0x0B, 0x8A, 0x24, 0x83,
        0x03, 0x06, 0x0A, 0x8B, 0x06, 0x0E, 0x0B, 0x0B, 0x0A, 0x91, 0x14, 0x8F, 0x8B, 0x17, 0x05, 0x85,
        0x06, 0x13, 0x11, 0x98, 0x0E, 0x1F, 0x97, 0x2B, 0x0B, 0x18, 0x0F, 0x36, 0x0B, 0xAB, 0x05, 0x85,
        0x0A, 0x11, 0x16, 0x8F, 0x91, 0x20, 0x0F, 0x8F, 0x14, 0x22, 0x21, 0x1D, 0x8F, 0x2D, 0x0B, 0x8B,
        0x8B, 0x98, 0x8F, 0xB7, 0x17, 0xAE, 0x8C, 0x0C, 0x05, 0x2F, 0x8B, 0xB5, 0x85, 0xA6, 0x84, 0x04,
        0x06, 0x0E, 0x91, 0x17, 0x13, 0x1F, 0x18, 0xAB, 0x11, 0x20, 0x22, 0x2D, 0x98, 0xAE, 0x2F, 0xA6,
        0x0E, 0x1F, 0x20, 0xAE, 0x1F, 0x33, 0x2E, 0x2A, 0x97, 0x2E, 0xAD, 0x28, 0x2B, 0x2A, 0x26, 0x25,
        0x0B, 0x97, 0x0F, 0x8C, 0x18, 0x2E, 0x37, 0x8C, 0x0F, 0xAD, 0x9D, 0x90, 0x36, 0x28, 0x35, 0x07,
        0x0B, 0x2B, 0x8F, 0x0C, 0xAB, 0x2A, 0x8C, 0x89, 0x05, 0x26, 0x0B, 0x87, 0x85, 0x25, 0x84, 0x82,
        0x0A, 0x0B, 0x14, 0x05, 0x11, 0x97, 0x0F, 0x05, 0x16, 0x0F, 0x21, 0x0B, 0x8F, 0x8C, 0x8B, 0x84,
        0x91, 0x18, 0x22, 0x2F, 0x20, 0x2E, 0xAD, 0x26, 0x0F, 0x37, 0x9D, 0x35, 0x8F, 0x8C, 0x0B, 0x84,
        0x14, 0x0F, 0x21, 0x8B, 0x22, 0xAD, 0x9D, 0x0B, 0x21, 0x9D, 0x9E, 0x8F, 0x1D, 0x90, 0x8F, 0x85,
        0x8F, 0x36, 0x1D, 0xB5, 0x2D, 0x28, 0x90, 0x87, 0x0B, 0x35, 0x8F, 0x34, 0x8B, 0x07, 0x85, 0x81,
        0x8B, 0x0B, 0x8F, 0x85, 0x98, 0x2B, 0x36, 0x85, 0x8F, 0x8F, 0x1D, 0x8B, 0xB7, 0x0C, 0xB5, 0x04,
        0x17, 0xAB, 0x2D, 0xA6, 0xAE, 0x2A, 0x28, 0x25, 0x8C, 0x8C, 0x90, 0x07, 0x0C, 0x89, 0x87, 0x82,
        0x05, 0x05, 0x0B, 0x84, 0x2F, 0x26, 0x35, 0x84, 0x8B, 0x0B, 0x8F, 0x85, 0xB5, 0x87, 0x34, 0x81,
        0x85, 0x85, 0x8B, 0x04, 0xA6, 0x25, 0x07, 0x82, 0x84, 0x84, 0x85, 0x81, 0x04, 0x82, 0x81, 0x80
    };

// The transitionCellData table holds the triangulation data for all 56 distinct classes to
// which a case can be mapped by the transitionCellClass table. The class index should be ANDed
// with 0x7F before using it to look up triangulation data in this table.

    public static readonly byte[][] TransitionCellData = new byte[][]
    {
        new byte[] {0x00, },
        new byte[] {0x42, 0, 1, 3, 1, 2, 3},
        new byte[] {0x31, 0, 1, 2},
        new byte[] {0x42, 0, 1, 2, 0, 2, 3},
        new byte[] {0x53, 0, 1, 4, 1, 3, 4, 1, 2, 3},
        new byte[] {0x64, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4},
        new byte[] {0x84, 0, 1, 3, 1, 2, 3, 4, 5, 6, 4, 6, 7},
        new byte[] {0x73, 0, 1, 3, 1, 2, 3, 4, 5, 6},
        new byte[] {0x84, 0, 1, 3, 1, 2, 3, 4, 5, 7, 5, 6, 7},
        new byte[] {0x62, 0, 1, 2, 3, 4, 5},
        new byte[] {0x53, 0, 1, 3, 0, 3, 4, 1, 2, 3},
        new byte[] {0x75, 0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5},
        new byte[] {0x84, 0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7},
        new byte[] {0x95, 0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 8, 6, 7, 8},
        new byte[] {0xA6, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8, 6, 8, 9},
        new byte[] {0x86, 0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6},
        new byte[] {0x95, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8},
        new byte[] {0x95, 0, 1, 3, 1, 2, 3, 4, 5, 7, 4, 7, 8, 5, 6, 7},
        new byte[] {0xA4, 0, 1, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9},
        new byte[] {0xC6, 0, 1, 3, 1, 2, 3, 4, 5, 7, 5, 6, 7, 8, 9, 10, 8, 10, 11},
        new byte[] {0x64, 0, 1, 3, 1, 2, 3, 0, 3, 4, 0, 4, 5},
        new byte[] {0x93, 0, 1, 2, 3, 4, 5, 6, 7, 8},
        new byte[] {0x64, 0, 1, 4, 0, 4, 5, 1, 3, 4, 1, 2, 3},
        new byte[] {0x97, 0, 1, 8, 1, 7, 8, 1, 2, 7, 2, 3, 7, 3, 4, 7, 4, 5, 7, 5, 6, 7},
        new byte[] {0xB7, 0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 7, 8, 10, 8, 9, 10},
        new byte[] {0xA6, 0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 7, 8, 9},
        new byte[] {0xB5, 0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7, 8, 9, 10},
        new byte[] {0xA6, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 9, 7, 8, 9},
        new byte[] {0xA6, 0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 9, 6, 8, 9, 6, 7, 8},
        new byte[] {0x97, 0, 1, 8, 1, 2, 8, 2, 3, 8, 3, 7, 8, 3, 4, 7, 4, 5, 7, 5, 6, 7},
        new byte[] {0x86, 0, 1, 7, 1, 6, 7, 1, 2, 6, 2, 5, 6, 2, 4, 5, 2, 3, 4},
        new byte[] {0xC8, 0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6, 8, 9, 10, 8, 10, 11},
        new byte[] {0xB7, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 9, 10, 6, 7, 9, 7, 8, 9},
        new byte[] {0x75, 0, 1, 6, 1, 3, 6, 1, 2, 3, 3, 4, 6, 4, 5, 6},
        new byte[] {0xA6, 0, 1, 3, 1, 2, 3, 4, 5, 9, 5, 8, 9, 5, 6, 8, 6, 7, 8},
        new byte[] {0xC4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
        new byte[] {0x86, 1, 2, 4, 2, 3, 4, 0, 1, 7, 1, 4, 7, 4, 6, 7, 4, 5, 6},
        new byte[] {0x64, 0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3},
        new byte[] {0x86, 0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 4, 7, 4, 6, 7, 4, 5, 6},
        new byte[] {0x97, 1, 2, 3, 1, 3, 4, 1, 4, 5, 0, 1, 8, 1, 5, 8, 5, 7, 8, 5, 6, 7},
        new byte[] {0xA6, 0, 1, 3, 1, 2, 3, 4, 5, 9, 5, 8, 9, 5, 6, 8, 6, 7, 8},
        new byte[] {0xC8, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 11, 7, 10, 11, 7, 8, 10, 8, 9, 10},
        new byte[] {0x97, 0, 1, 8, 1, 2, 8, 2, 7, 8, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6},
        new byte[] {0x97, 0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 4, 8, 4, 7, 8, 4, 5, 7, 5, 6, 7},
        new byte[] {0xB7, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 10, 7, 9, 10, 7, 8, 9},
        new byte[] {0xA8, 0, 1, 9, 1, 2, 9, 2, 8, 9, 2, 3, 8, 3, 7, 8, 3, 4, 7, 4, 6, 7, 4, 5, 6},
        new byte[] {0xB9, 0, 1, 7, 1, 6, 7, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 0, 7, 10, 7, 9, 10, 7, 8, 9},
        new byte[] {0xA6, 0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 6, 7, 9, 7, 8, 9},
        new byte[] {0xC6, 0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11},
        new byte[] {0xB7, 0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6, 8, 9, 10},
        new byte[] {0xA8, 1, 2, 3, 1, 3, 4, 1, 4, 6, 4, 5, 6, 0, 1, 9, 1, 6, 9, 6, 8, 9, 6, 7, 8},
        new byte[] {0xCC, 0, 1, 9, 1, 8, 9, 1, 2, 8, 2, 11, 8, 2, 3, 11, 3, 4, 11, 4, 5, 11, 5, 10, 11, 5, 6, 10, 6, 9, 10, 6, 7, 9, 7, 0, 9},
        new byte[] {0x86, 0, 1, 2, 0, 2, 3, 0, 6, 7, 0, 3, 6, 1, 4, 5, 1, 5, 2},
        new byte[] {0x97, 0, 1, 4, 1, 3, 4, 1, 2, 3, 2, 5, 6, 2, 6, 3, 0, 7, 8, 0, 4, 7},
        new byte[] {0xA8, 0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 3, 6, 7, 3, 7, 4, 0, 8, 9, 0, 5, 8},
        new byte[] {0xA8, 0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 2, 6, 3, 3, 6, 7, 0, 8, 9, 0, 5, 8}
    };

    // The transitionCornerData table contains the transition cell corner reuse data
    // shown in Figure 4.18.

    public static readonly byte[] transitionCornerData = new byte[13]
    {
        0x30, 0x21, 0x20, 0x12, 0x40, 0x82, 0x10, 0x81, 0x80, 0x37, 0x27, 0x17, 0x87
    };

    // The transitionVertexData table gives the vertex locations for every one of the 512 possible
    // cases in the Tranvoxel Algorithm. Each 16-bit value also provides information about whether
    // a vertex can be reused from a neighboring cell. See Section 4.5 for details. The low byte
    // contains the indexes for the two endpoints of the edge on which the vertex lies, as numbered
    // in Figure 4.16. The high byte contains the vertex reuse data shown in Figure 4.17.

    public static readonly ushort[][] transitionVertexData = new ushort[][]
    {
        new ushort[] {},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x2301, 0x2412, 0x4514},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x4514, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8525, 0x8658, 0x4445},
        new ushort[] {0x1503, 0x2301, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2412, 0x4514, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8478, 0x4445, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x8367, 0x4647},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x2301, 0x2412, 0x4514, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x2412, 0x8525, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8525, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4647, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8367, 0x1636, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4445, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4514, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x1503, 0x4514, 0x8525, 0x8658, 0x8478, 0x8367, 0x1636},
        new ushort[] {0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x2412, 0x4445, 0x8478, 0x8367, 0x1636, 0x1503, 0x2301},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8478},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8658, 0x4445, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x4445, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x1636, 0x4647, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x1636, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8658, 0x4647, 0x1636, 0x1503, 0x2301, 0x2412, 0x8525},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x1503, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x4445, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x1636},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new ushort[] {0x1636, 0x1503, 0x4334},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x1636, 0x1503, 0x4334, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8367, 0x4647, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x4334, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x4647, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x2301, 0x4334, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1503, 0x4334, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x2301, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4334, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8367, 0x4334, 0x2301, 0x2412, 0x8525, 0x8658, 0x8478},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x8525},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x4514, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x8367, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x4514, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x2301},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x4334, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x4514, 0x4445, 0x4647, 0x4334},
        new ushort[] {0x4514, 0x4445, 0x4647, 0x4334},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x4334, 0x4514, 0x4445, 0x4647},
        new ushort[] {0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x4514, 0x4445, 0x4647, 0x4334},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x4514, 0x4445, 0x4647, 0x4334},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new ushort[] {0x1503, 0x2301, 0x289A, 0x199B, 0x8525, 0x4514, 0x4334, 0x4647, 0x8658},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x2301},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x8658, 0x4647, 0x4334, 0x4514, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC, 0x4445, 0x4647, 0x4334, 0x4514},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC, 0x4334, 0x4514, 0x4445, 0x4647},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC, 0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B, 0x8658, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x4445, 0x4647, 0x4334, 0x4514},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC, 0x4514, 0x4445, 0x4647, 0x4334},
        new ushort[] {0x2301, 0x4334, 0x4647, 0x4445, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x1503, 0x2412, 0x8525, 0x199B, 0x289A, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new ushort[] {0x8367, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x2412, 0x8525, 0x89AC, 0x289A, 0x8478, 0x4445, 0x4514, 0x4334, 0x8367},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new ushort[] {0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x8525},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x8367, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478},
        new ushort[] {0x8367, 0x4334, 0x2301, 0x2412, 0x8525, 0x8658, 0x8478},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4334, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x1503, 0x4334, 0x8367, 0x289A, 0x199B, 0x88BC, 0x89AC},
        new ushort[] {0x8367, 0x4334, 0x4514, 0x4445, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x2301, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x1503, 0x4334, 0x8367, 0x8525, 0x2412, 0x88BC, 0x89AC, 0x289A, 0x199B},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x2301, 0x4334, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B, 0x4647, 0x4334, 0x4514, 0x4445},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x4334, 0x4514, 0x4445, 0x4647},
        new ushort[] {0x8367, 0x1636, 0x199B, 0x88BC, 0x2301, 0x4334, 0x4647, 0x4445, 0x2412},
        new ushort[] {0x2412, 0x4445, 0x4647, 0x4334, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B, 0x4514, 0x4445, 0x4647, 0x4334},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC, 0x4334, 0x4514, 0x4445, 0x4647},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B, 0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B, 0x8658, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A, 0x8367, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x4647, 0x4334, 0x4514, 0x4445},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A, 0x4647, 0x4334, 0x4514, 0x4445},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B, 0x4445, 0x4647, 0x4334, 0x4514},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x4334, 0x4514, 0x4445, 0x4647},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334},
        new ushort[] {0x8525, 0x4514, 0x4334, 0x4647, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x4334, 0x4647, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x2412, 0x8525, 0x89AC, 0x289A, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x1503},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4445, 0x4514, 0x4334, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x8525, 0x4445, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x4514, 0x4334, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x2412, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x1503, 0x1636, 0x4334},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x1636, 0x1503, 0x4334, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new ushort[] {0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x2412},
        new ushort[] {0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x1636, 0x1503, 0x4334},
        new ushort[] {0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x1636},
        new ushort[] {0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new ushort[] {0x1636, 0x4647, 0x4445, 0x4514, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x1503, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x8658, 0x4647, 0x1636, 0x1503, 0x2301, 0x2412, 0x8525},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x1636, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x1636, 0x4647, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x88BC, 0x89AC, 0x1636, 0x4647, 0x4445, 0x4514, 0x1503},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC, 0x2412, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301},
        new ushort[] {0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x4647, 0x4445, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x88BC},
        new ushort[] {0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8478, 0x4647, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x8478, 0x4647, 0x1636, 0x2412, 0x8525, 0x199B, 0x289A, 0x89AC, 0x88BC},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8478},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x289A},
        new ushort[] {0x2412, 0x4445, 0x8478, 0x8367, 0x1636, 0x1503, 0x2301},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC, 0x1503, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x4445, 0x4514, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new ushort[] {0x1503, 0x4514, 0x8525, 0x8658, 0x8478, 0x8367, 0x1636},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4514, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8658, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4445, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x1636, 0x8367, 0x289A, 0x199B, 0x88BC, 0x89AC},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x8367, 0x1636, 0x199B, 0x88BC, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new ushort[] {0x8367, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x2412, 0x8525, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8367, 0x1636, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x1636, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x289A},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC, 0x2412, 0x8525, 0x89AC, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x8525, 0x4445, 0x4647, 0x8367, 0x1503, 0x2301, 0x88BC, 0x199B, 0x289A, 0x89AC},
        new ushort[] {0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4647, 0x8367, 0x88BC, 0x199B},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x8367, 0x4647, 0x8658, 0x199B, 0x88BC, 0x89AC, 0x289A},
        new ushort[] {0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x4514},
        new ushort[] {0x8367, 0x4647, 0x8658, 0x2301, 0x1503, 0x89AC, 0x289A, 0x199B, 0x88BC},
        new ushort[] {0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new ushort[] {0x1503, 0x4514, 0x4445, 0x4647, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new ushort[] {0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647},
        new ushort[] {0x1503, 0x2301, 0x289A, 0x199B, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x8367},
        new ushort[] {0x8525, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x2412, 0x8525, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8367, 0x8478, 0x4647},
        new ushort[] {0x2301, 0x2412, 0x4514, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new ushort[] {0x8478, 0x8367, 0x4647},
        new ushort[] {0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x1503, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x4445, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x89AC},
        new ushort[] {0x8525, 0x4445, 0x8478, 0x1503, 0x2301, 0x88BC, 0x199B, 0x289A, 0x89AC},
        new ushort[] {0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new ushort[] {0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new ushort[] {0x2412, 0x4514, 0x1503, 0x8478, 0x8658, 0x199B, 0x88BC, 0x89AC, 0x289A},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new ushort[] {0x1503, 0x2301, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new ushort[] {0x8478, 0x8658, 0x89AC, 0x88BC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
        new ushort[] {0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x289A},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x8658},
        new ushort[] {0x1503, 0x2301, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new ushort[] {0x8525, 0x8658, 0x4445},
        new ushort[] {0x8525, 0x4514, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
        new ushort[] {0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new ushort[] {0x8525, 0x2412, 0x289A, 0x89AC},
        new ushort[] {0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
        new ushort[] {0x2301, 0x2412, 0x4514},
        new ushort[] {0x2301, 0x1503, 0x199B, 0x289A},
        new ushort[] {}
    };

    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using Unity.Burst;
using System.Runtime.CompilerServices;
using System;
using Unity.Collections.LowLevel.Unsafe;
using DataStructures;

namespace WorldGeneration
{
    [Serializable]
    public class NoiseData
    {
        public float surfaceLevel;
        public float freq;
        public float ampl;
        public int oct;
        public float offset;
    }
    [BurstCompile]
    public struct MarchingJob : IJobFor
    {
        /// <summary>
        /// The densities to generate the mesh off of
        /// </summary>
        [ReadOnly, NativeDisableContainerSafetyRestriction] public NativeArray<sbyte> densities;
        
        [ReadOnly] public NeighbourDensities front;
        [ReadOnly] public NeighbourDensities back;
        [ReadOnly] public NeighbourDensities left;
        [ReadOnly] public NeighbourDensities right;
        [ReadOnly] public NeighbourDensities up;
        [ReadOnly] public NeighbourDensities down;
        [ReadOnly] public byte neighbourDirectionMask;
        [ReadOnly] public float isolevel;
        [ReadOnly] public int chunkSize;
        [WriteOnly] public Counter vertexCounter;
        
        [WriteOnly] public Counter indexCounter;
        [NativeDisableParallelForRestriction, WriteOnly] public NativeArray<VertexData> vertices;
        
        [NativeDisableParallelForRestriction, WriteOnly] public NativeArray<ushort> triangles;
        [ReadOnly] public int depthMultiplier;
        public NativeArray<ushort3> vertexIndices;
        public void Execute(int index)
        {
            int3 voxelLocalPosition = Utils.IndexToXyz(index, chunkSize);


            VoxelCorners<sbyte> density = GetDensities(voxelLocalPosition);

            int caseCode = ((density[0] >> 7) & 0x01)
                                    | ((density[1] >> 6) & 0x02)
                                    | ((density[2] >> 5) & 0x04)
                                    | ((density[3] >> 4) & 0x08)
                                    | ((density[4] >> 3) & 0x10)
                                    | ((density[5] >> 2) & 0x20)
                                    | ((density[6] >> 1) & 0x40)
                                    | (density[7] & 0x80);
            if ((caseCode ^ ((density[7] >> 7) & 0xFF)) == 0)
            {
                return;
            }
            byte cell = Tables.RegularCellClass[caseCode];
            var triRowIndex = cell * 16;
            var vertRowIndex = caseCode * 12;
            byte cellData = Tables.RegularCellData[triRowIndex];
            //ushort[] vertexLocations = Tables.RegularVertexData[caseCode];
            long vertexCount = (cellData >> 4);
            long triangleCount = (cellData & 0x0F);
            
            CellIndices cellIndices = new CellIndices();
            vertexIndices[index] = new ushort3(0);
            var currentCell = vertexIndices[index];
            
            for (int i = 0; i < vertexCount; i++)
            {
                ushort edge = (ushort)(Tables.RegularVertexData[i + vertRowIndex]);

                byte v0 = (byte)((edge >> 4) & 0x0F); //First Corner Index
                byte v1 = (byte)(edge & 0x0F); //Second Corner Index

                int t = (density[v1] << 8) / (density[v1] - density[v0]);

                int3 cellDirection = DecodeCellIndices((byte)(edge >> 12));
                int vertexEdgeIndex = (edge >> 8) & 0xF;
                //if ((t & 0x00FF) != 0){
                    if((edge >> 12) == 8){
                        // Vertex lies in the interior of the edge.
                        var newVertexIndex = CreateNewVertex(voxelLocalPosition, v0, v1, t);
                        currentCell[vertexEdgeIndex] = newVertexIndex;
                        cellIndices[i] = newVertexIndex;
                    }else{
                        if((cellDirection.x == -1 && voxelLocalPosition.x == 0) || (cellDirection.y == -1 && voxelLocalPosition.y == 0) || (cellDirection.z == -1 && voxelLocalPosition.z == 0)){
                            cellIndices[i] = CreateNewVertex(voxelLocalPosition, v0, v1, t);
                        }
                        else{
                            cellIndices[i] = GetCell(voxelLocalPosition + cellDirection)[vertexEdgeIndex];
                        }
                    }
                //}
                /*else if (t == 0){
                    // Vertex lies at the higher-numbered endpoint.
                    if (v1 == 7){
                    // This cell owns the vertex.
                        var newVertexIndex = CreateNewVertex(voxelLocalPosition, v1, v1, t);
                        currentCell[vertexEdgeIndex] = newVertexIndex;
                        cellIndices[i] = newVertexIndex;
                    }
                    else{
                        if((cellDirection.x == -1 && voxelLocalPosition.x == 0) || (cellDirection.y == -1 && voxelLocalPosition.y == 0) || (cellDirection.z == -1 && voxelLocalPosition.z == 0)){
                            cellIndices[i] = CreateNewVertex(voxelLocalPosition, v1, v1, t);
                        }
                        else{
                            cellIndices[i] = cellIndices[i] = GetCell(voxelLocalPosition + cellDirection)[vertexEdgeIndex];
                        }
                    }
                }
                else{
                    if((cellDirection.x == -1 && voxelLocalPosition.x == 0) || (cellDirection.y == -1 && voxelLocalPosition.y == 0) || (cellDirection.z == -1 && voxelLocalPosition.z == 0)){
                        cellIndices[i] = CreateNewVertex(voxelLocalPosition, v0, v0, t);
                    }
                    else{
                        cellIndices[i] = cellIndices[i] = GetCell(voxelLocalPosition + cellDirection)[vertexEdgeIndex];
                    }
                }*/
            }
            vertexIndices[index] = currentCell;
            for(int i = 0; i < triangleCount; i++){
                var idx = indexCounter.Increment() * 3;
                for(int v = 0; v < 3; v++){
                    triangles[idx + v] = cellIndices[Tables.RegularCellData[triRowIndex + i * 3 + v + 1]];
                }
                /*triangles[idx] = cellIndices[Tables.RegularCellData[triRowIndex + i * 3 + 1]];
                triangles[idx + 1] = cellIndices[Tables.RegularCellData[triRowIndex + i * 3 + 2]];
                triangles[idx + 2] = cellIndices[Tables.RegularCellData[triRowIndex + i * 3 + 3]];*/
            }
            /*for(int i = 0; i < triangleCount; i += 3){
                if(voxelLocalPosition.x == 0 || voxelLocalPosition.y == 0 || voxelLocalPosition.z == 0) continue;
                if(voxelLocalPosition.x >= chunkSize - 1 && neighbours.c0.x) continue;
                else if(voxelLocalPosition.x == 1 && neighbours.c0.y) continue;
                if(voxelLocalPosition.y >= chunkSize - 1 && neighbours.c1.x) continue;
                else if(voxelLocalPosition.y == 1 && neighbours.c1.y) continue;
                if(voxelLocalPosition.z >= chunkSize - 1 && neighbours.c2.x) continue;
                else if(voxelLocalPosition.z == 1 && neighbours.c2.y) continue;
                
                int triangleIndex = indexCounter.Increment() * 3;
                triangles[triangleIndex + 0] = GetVertexIndex(Tables.RegularCellData[triRowIndex + i + 0], voxelLocalPosition, indices);
                triangles[triangleIndex + 1] = GetVertexIndex(Tables.RegularCellData[triRowIndex + i + 1], voxelLocalPosition, indices);
                triangles[triangleIndex + 2] = GetVertexIndex(Tables.RegularCellData[triRowIndex + i + 2], voxelLocalPosition, indices);
            }
            vertexIndices[index] = indices;*/
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        int3 DecodeCellIndices(byte idx){
            int3 value = new int3();
            value.z = -((idx >> 2) & 1);
            value.y = -((idx >> 1) & 1);
            value.x = -(idx & 1);
            return value;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ushort3 GetCell(int3 voxelLocalPosition){
            return vertexIndices[Utils.XyzToIndex(voxelLocalPosition, chunkSize)];
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ushort CreateNewVertex(int3 voxelLocalPosition, byte v0, byte v1, int t){
            int u = 0x0100 - t;
            //Q = t * P0 + u * P1;
            float3 vertPos;
            float3 vertNormal;
            float3 P0 = (voxelLocalPosition + Tables.CubeCorners[v0]);
            float3 N0 = GetVertexNormal((int3)P0);
            if(v0 != v1){
                float3 P1 = (voxelLocalPosition + Tables.CubeCorners[v1]);
                float3 N1 = GetVertexNormal((int3)P1);
                vertPos = (t * P0 + u * P1) * depthMultiplier ;
                vertNormal = (t * N0 + u * N1);
            }else{
                vertPos = P0 * depthMultiplier;
                vertNormal = N0;
            }
            
            int vertexIndex = vertexCounter.Increment();
            vertices[vertexIndex] = new VertexData(vertPos / 256f, vertNormal / 256f);
            return (ushort)vertexIndex;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private VoxelCorners<sbyte> GetDensities(int3 localPosition)
        {
            VoxelCorners<sbyte> densities = new VoxelCorners<sbyte>();
            for (int i = 0; i < 8; i++)
            {
                int3 voxelCorner = localPosition + Tables.CubeCorners[i];
                var dens = SampleDensity(voxelCorner);
                densities[i] = dens;
            }

            return densities;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float3 GetVertexNormal(int3 voxelLocalPosition){
            //if(voxelLocalPosition.x >= chunkSize || voxelLocalPosition.y >= chunkSize || voxelLocalPosition.z >= chunkSize) return new float3(0);
            float nx = (SampleDensity(voxelLocalPosition + new int3(1, 0, 0)) - SampleDensity(voxelLocalPosition - new int3(1, 0, 0)));
            float ny = (SampleDensity(voxelLocalPosition + new int3(0, 1, 0)) - SampleDensity(voxelLocalPosition - new int3(0, 1, 0)));
            float nz = (SampleDensity(voxelLocalPosition + new int3(0, 0, 1)) - SampleDensity(voxelLocalPosition - new int3(0, 0, 1)));
            return math.normalize((new float3(nx,ny,nz)));
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public sbyte SampleDensity(int3 pos){
            var neighbours = Utils.DecodeNeighborMask(neighbourDirectionMask);
            if(pos.x > chunkSize){
                pos = math.clamp(pos, new int3(0), new int3(chunkSize + 1));
                if(neighbours.c0.x){
                    float2 scaledPosition = new float2(pos.y, pos.z) * 2;
                    int2 quadrantOffset = GetQuadrantOffset(scaledPosition);
                    var neighbourDensities = GetNeighbourQuadrant(front, quadrantOffset);
                    if(neighbourDensities == default) return 127;
                    return neighbourDensities[Utils.XyzToIndex(new int3(0, pos.y - chunkSize / 2 * quadrantOffset.x, pos.z - chunkSize / 2 * quadrantOffset.y), chunkSize + 1)];
                }else{
                    if(front[0] != default){
                        return front[0][Utils.XyzToIndex(new int3(0, pos.y, pos.z), chunkSize + 1)];
                    }
                }
            }else if(pos.x < 0){
                pos = math.clamp(pos, new int3(0), new int3(chunkSize + 1));
                if(neighbours.c0.y){
                    float2 scaledPosition = new float2(pos.y, pos.z) * 2;
                    int2 quadrantOffset = GetQuadrantOffset(scaledPosition);
                    var neighbourDensities = GetNeighbourQuadrant(back, quadrantOffset);
                    if(neighbourDensities == default) return 127;
                    return neighbourDensities[Utils.XyzToIndex(new int3(chunkSize + 1, pos.y - chunkSize / 2 * quadrantOffset.x, pos.z - chunkSize / 2 * quadrantOffset.y), chunkSize + 1)];
                }else{
                    if(back[0] != default){
                        return back[0][Utils.XyzToIndex(new int3(chunkSize + 1, pos.y, pos.z), chunkSize + 1)];
                    }
                }
            }else if(pos.y > chunkSize){
                pos = math.clamp(pos, new int3(0), new int3(chunkSize + 1));
                if(neighbours.c1.x){
                    float2 scaledPosition = new float2(pos.x, pos.z) * 2;
                    int2 quadrantOffset = GetQuadrantOffset(scaledPosition);
                    var neighbourDensities = GetNeighbourQuadrant(up, quadrantOffset);
                    if(neighbourDensities == default) return 127;
                    return neighbourDensities[Utils.XyzToIndex(new int3(pos.x - chunkSize / 2 * quadrantOffset.x, 0, pos.z - chunkSize / 2 * quadrantOffset.y), chunkSize + 1)];
                }else{
                    if(up[0] != default){
                        return up[0][Utils.XyzToIndex(new int3(pos.x, 0, pos.z), chunkSize + 1)];
                    }
                }
            }else if(pos.y < 0){
                pos = math.clamp(pos, new int3(0), new int3(chunkSize + 1));
                if(neighbours.c1.y){
                    float2 scaledPosition = new float2(pos.x, pos.z) * 2;
                    int2 quadrantOffset = GetQuadrantOffset(scaledPosition);
                    var neighbourDensities = GetNeighbourQuadrant(down, quadrantOffset);
                    if(neighbourDensities == default) return 127;
                    return neighbourDensities[Utils.XyzToIndex(new int3(pos.x - chunkSize / 2 * quadrantOffset.x, chunkSize + 1, pos.z - chunkSize / 2 * quadrantOffset.y), chunkSize + 1)];
                }else{
                    if(down[0] != default){
                        return down[0][Utils.XyzToIndex(new int3(pos.x, chunkSize + 1, pos.z), chunkSize + 1)];
                    }
                }
            }else if(pos.z > chunkSize){
                pos = math.clamp(pos, new int3(0), new int3(chunkSize + 1));
                if(neighbours.c2.x){
                    float2 scaledPosition = new float2(pos.y, pos.x) * 2;
                    int2 quadrantOffset = GetQuadrantOffset(scaledPosition);
                    var neighbourDensities = GetNeighbourQuadrant(right, quadrantOffset);
                    if(neighbourDensities == default) return 127;
                    return neighbourDensities[Utils.XyzToIndex(new int3(pos.x - chunkSize / 2 * quadrantOffset.y, pos.y - chunkSize / 2 * quadrantOffset.x, 0), chunkSize + 1)];
                }else{
                    if(right[0] != default){
                        return right[0][Utils.XyzToIndex(new int3(pos.x, pos.y, 0), chunkSize + 1)];
                    }
                }
            }else if(pos.z < 0){
                pos = math.clamp(pos, new int3(0), new int3(chunkSize + 1));
                if(neighbours.c2.y){
                    float2 scaledPosition = new float2(pos.y, pos.x) * 2;
                    int2 quadrantOffset = GetQuadrantOffset(scaledPosition);
                    var neighbourDensities = GetNeighbourQuadrant(left, quadrantOffset);
                    if(neighbourDensities == default) return 127;
                    return neighbourDensities[Utils.XyzToIndex(new int3(pos.x - chunkSize / 2 * quadrantOffset.y, pos.y - chunkSize / 2 * quadrantOffset.x, chunkSize + 1), chunkSize + 1)];
                }else{
                    if(down[0] != default){
                        return down[0][Utils.XyzToIndex(new int3(pos.x, pos.y, chunkSize + 1), chunkSize + 1)];
                    }
                }
            }
            return densities[Utils.XyzToIndex(pos, chunkSize + 1)];
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private int2 GetQuadrantOffset(float2 scaledPosition){
            int2 quadrantOffset = new int2(0);
            if(scaledPosition.x > chunkSize) {
                quadrantOffset.x = 1;
            }
            if(scaledPosition.y > chunkSize) {
                quadrantOffset.y = 1;
            }
            return quadrantOffset;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private NativeArray<sbyte> GetNeighbourQuadrant(NeighbourDensities neighbour, int2 quadrantOffset){
            
            if(quadrantOffset.x == 1){
                if(quadrantOffset.y == 1){
                    return neighbour[1];
                }else{
                    return neighbour[3];
                }
            }else if(quadrantOffset.y == 1){
                return neighbour[0];
            }else{
                return neighbour[2];
            }
        }
    }
    //Chunk noisemap update job, in a ball shape. Could implement more complex logic for this as well.
    [BurstCompile]
    public struct ChunkExplodeJob : IJobParallelFor
    {
        //Chunk's noisemap to edit.
        [NativeDisableContainerSafetyRestriction, WriteOnly] public NativeArray<float> noiseMap;
        //Chunk size + 1 to account for borders
        [ReadOnly] public int size;
        //New density value
        [ReadOnly] public float newDensity;
        //Where the "explosion" happens, in local coordinates relative to chunk
        [ReadOnly] public int3 explosionOrigin;
        //How big of an explosion should happen
        [ReadOnly] public float explosionRange;

        public void Execute(int index)
        {
            var pos = new float3(index / (size * size), index / size % size, index % size);
            if(math.distance(pos, explosionOrigin) < explosionRange)
            {
                noiseMap[index] = newDensity;
            }

        }
    }
    //A job to bake chunk colliders
    public struct ChunkColliderBakeJob : IJob
    {
        [ReadOnly] public int meshId;
        public void Execute()
        {
            Physics.BakeMesh(meshId, false);
        }
    }
    //Calculate noise in jobs
    [BurstCompile]
    public struct NoiseJob : IJobParallelFor
    {
        [ReadOnly] public float surfaceLevel;
        [ReadOnly] public float3 offset;
        [ReadOnly] public float3 seed;
        [ReadOnly] public float ampl;
        [ReadOnly] public float freq;
        [ReadOnly] public int oct;
        [ReadOnly] public int depthMultiplier;
        
        [NativeDisableParallelForRestriction, NativeDisableContainerSafetyRestriction, WriteOnly]
        public NativeArray<sbyte> noiseMap;
        [ReadOnly] public int size;



        public void Execute(int index)
        {
            noiseMap[index] = FinalNoise(Utils.IndexToXyz(index, size) * depthMultiplier);
        }
        /*[MethodImpl(MethodImplOptions.AggressiveInlining)]
        private sbyte Remap(float value, float start1, float stop1, float start2, float stop2){
            return Convert.ToSByte(start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1)));
        }*/
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        sbyte FinalNoise(float3 pos)
        {
            //pos -= depthMultiplier;
            float value = SurfaceNoise2D(pos.x, pos.z);
            float yPos = offset.y + pos.y;
            float density = (value + surfaceLevel - yPos) * 0.1f;
            //value -= pos.y + offset.y - surfaceLevel;
            //value += PerlinNoise3D(pos.x, pos.y, pos.z) * math.clamp(value, 0f, -1f);
            //value = -value;
            return Convert.ToSByte(math.clamp(-density * 127f, -127f, 127f));
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        float PerlinNoise3D(float x, float y, float z)
        {
            float total = 0;
            var ampl = this.ampl;
            var freq = this.freq;
            for (int i = 0; i < oct; i++)
            {
                total += noise.snoise(math.float3((x + offset.x + seed.x) * freq, (y + offset.y + seed.y) * freq, (z + offset.z + seed.z) * freq) * ampl);

                ampl *= 2;
                freq *= 0.5f;
            }
            //total -= total % 2.5f;
            return total;
        }
        float PerlinNoise3DSnake(float x, float y, float z)
        {
            float total = 0;
            var ampl = this.ampl;
            var freq = this.freq + 0.03f;
            for (int i = 0; i < oct; i++)
            {
                total += noise.snoise(math.float3((x + offset.x + seed.x) * freq, (y + offset.y + seed.y) * freq, (z + offset.z + seed.z) * freq) * ampl);

                ampl *= 2;
                freq *= 0.5f;
            }
            total -= total % 2.5f;
            return total;
        }
        float SurfaceNoise2D(float x, float z)
        {
            float total = 0;
            var ampl = this.ampl;
            var freq = this.freq;
            for (int i = 0; i < oct; i++)
            {
                total += noise.snoise(math.float2((x + offset.x + seed.x) * freq, (z + offset.z + seed.z) * freq)) * ampl;

                ampl *= 2;
                freq *= 0.5f;
            }
            //total = total % 5f;
            return total;
        }
    }

    //Tables used for marching cubes. Taken from https://github.com/Eldemarkki/Marching-Cubes-Terrain
    internal class Tables
    {
        /// <summary>
        /// Lookup table for how the edges should be connected
        /// </summary>
        public static readonly int[] EdgeIndexTable =
        {
            0, 1,
            1, 2,
            2, 3,
            3, 0,
            4, 5,
            5, 6,
            6, 7,
            7, 4,
            0, 4,
            1, 5,
            2, 6,
            3, 7
        };
        public static readonly int3[] CubeCorners =
        {
            new int3(0, 0, 0),
            new int3(1, 0, 0),
            new int3(0, 1, 0),
            new int3(1, 1, 0),
            new int3(0, 0, 1),
            new int3(1, 0, 1),
            new int3(0, 1, 1),
            new int3(1, 1, 1)
        };

        public static readonly byte[] RegularCellClass =
        {
            0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
            0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
            0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
            0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
            0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
            0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
            0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
            0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
            0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
            0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
            0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
            0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
            0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
            0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
            0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
            0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00

        };

         public static readonly byte[] RegularCellData = new byte[] {
            0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0x31, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0x62, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0x42, 0, 1, 2, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0x53, 0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 0, 0, 0, 0, 0,
            0x73, 0, 1, 2, 0, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0,
            0x93, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0,
            0x84, 0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7, 0, 0, 0,
            0x84, 0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 0, 0, 0,
            0xC4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0,
            0x64, 0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 0, 0,
            0x64, 0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2, 0, 0, 0,
            0x64, 0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 0, 0, 0,
            0x64, 0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 0, 0,
            0x75, 0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6,
            0x95, 0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8
    };

        public static readonly ushort[] RegularVertexData = new ushort[3060] {
        0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x3304, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x6201, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8337, 0x4223,  0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x8337, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4113, 0x8337, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2315, 0x8337, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1146, 0x2245, 0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x4113, 0x8337, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x6201, 0x2315, 0x8337, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8337, 0x2315, 0x2245, 0x1146, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4113, 0x8337, 0x1326, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8337, 0x1326, 0x1146, 0x2245, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x2315, 0x8337, 0x1326, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x6201, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x1326, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4223, 0x1326, 0x3304, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2245, 0x8157, 0x4113, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x1326, 0x3304, 0x2245, 0x8157, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4113, 0x8337, 0x1326, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1326, 0x8337, 0x8157, 0x2245, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x8337, 0x1326, 0x3304, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x3304, 0x1146, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x5102, 0x1146, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x4223, 0x6201, 0x2315, 0x8157, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x1146, 0x8157, 0x4113, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x3304, 0x1146, 0x8157, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1146, 0x8157, 0x8337, 0x4223, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x5102, 0x1146, 0x8157, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4113, 0x8337, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4113, 0x8337, 0x1326, 0x1146, 0x8157, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x3304, 0x1146, 0x8157, 0x8337, 0x1326, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x1146, 0x8157, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x3304, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x8267, 0x1146, 0x6201, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x8267, 0x4223, 0x4113, 0x2315, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x8337, 0x8267, 0x1146, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x3304, 0x2315, 0x8337, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1326, 0x8267, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1326, 0x8267, 0x2245, 0x6201, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x8267, 0x2245, 0x2315, 0x4113, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4223, 0x8267, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x6201, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x4223, 0x8267, 0x2245, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x6201, 0x2315, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1326, 0x8267, 0x2245, 0x2315, 0x8337, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2245, 0x8267, 0x8337, 0x4113, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8267, 0x2245, 0x6201, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x6201, 0x2315, 0x8337, 0x8267, 0x2245, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x8337, 0x8267, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2245, 0x8157, 0x4113, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8267, 0x1146, 0x5102, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2245, 0x8157, 0x4113, 0x4223, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146,
        0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x1326, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x2315, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2245, 0x8157, 0x8337, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x1326, 0x3304, 0x6201, 0x4113, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x8157, 0x4113, 0x5102, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x8267, 0x8157, 0x2315, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x6201, 0x4223, 0x8267, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x5102, 0x4223, 0x8267, 0x8157, 0x4113, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x4223, 0x8267, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x8337, 0x4223, 0x6201, 0x3304, 0x1326, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1326, 0x8267, 0x8157, 0x8337, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x8157, 0x2315, 0x3304, 0x5102, 0x4113, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4113, 0x8337, 0x8267, 0x8157, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x3304, 0x5102, 0x8337, 0x8267, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8267, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x3304, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8157, 0x8267, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x4113, 0x8157, 0x8267, 0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x4113, 0x6201, 0x3304, 0x1326, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x1326, 0x3304, 0x2315, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267,
        0x4113, 0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x8337, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x1146, 0x2245, 0x6201, 0x4113, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x1326, 0x3304, 0x1146, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x1146, 0x2245, 0x2315, 0x8157, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x2245, 0x8267, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x2245, 0x8267, 0x8337, 0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4113, 0x8337, 0x8267, 0x2245, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x2315, 0x2245, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x4223, 0x1326, 0x3304, 0x2245, 0x8267, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2245, 0x8267, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2245, 0x8267, 0x4223, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x3304, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x6201, 0x2245, 0x8267, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2245, 0x8267, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1146, 0x8267, 0x8337, 0x4113, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x4113, 0x5102, 0x1146, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x8337, 0x4113, 0x6201, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x4223, 0x1326, 0x1146, 0x8267, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2315, 0x4113, 0x4223, 0x8267, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x6201, 0x5102, 0x1146, 0x8267, 0x4223, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x8267, 0x4223, 0x6201, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1146, 0x8267, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8267, 0x1326, 0x5102, 0x4113, 0x2315, 0x3304, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4113, 0x2315, 0x1326, 0x1146, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x3304, 0x1146, 0x8267, 0x1326, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x1146, 0x8267, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x8337, 0x8157, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x5102, 0x3304, 0x2315, 0x1326, 0x8337, 0x8157, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x6201, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x8157, 0x2315, 0x6201, 0x4223, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x5102, 0x3304, 0x2315, 0x8157, 0x1146, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8157, 0x1146, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4113, 0x8157, 0x1146, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x8157, 0x1146, 0x5102, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x8157, 0x1146, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2245, 0x8157, 0x8337, 0x1326, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x6201, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x2315, 0x4113, 0x5102, 0x1326, 0x8337, 0x8157, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8337, 0x8157, 0x2245, 0x3304, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x2245, 0x6201, 0x4223, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x3304, 0x5102, 0x4223, 0x8337, 0x8157, 0x4113, 0x6201, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8337, 0x8157, 0x2245, 0x2315, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x4223, 0x4113, 0x8157, 0x2245, 0x6201, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x6201, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1326, 0x4223, 0x2315, 0x8157, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x5102, 0x4113, 0x8157, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x8157, 0x2245, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x6201, 0x2315, 0x8157, 0x2245, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2315, 0x8157, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1146, 0x2245, 0x2315, 0x8337, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x3304, 0x6201, 0x4223, 0x8337, 0x2315, 0x2245, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x8337, 0x4113, 0x6201, 0x2245, 0x1146, 0x5102, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8337, 0x4113, 0x3304, 0x2245, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x2315, 0x2245, 0x1146, 0x1326, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1146, 0x1326, 0x4223, 0x4113, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x4223, 0x6201, 0x2245, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x5102, 0x3304, 0x2245, 0x1146, 0x1326, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x2245, 0x1146, 0x5102, 0x4113, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x2315, 0x2245, 0x1146, 0x3304, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x2245, 0x1146, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x2245, 0x1146, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1326, 0x8337, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1326, 0x8337, 0x2315, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x3304, 0x1326, 0x8337, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1326, 0x8337, 0x4113, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4223, 0x8337, 0x2315, 0x3304, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4223, 0x8337, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x5102, 0x4223, 0x8337, 0x4113, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x4223, 0x8337, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x4113, 0x2315, 0x3304, 0x1326, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x1326, 0x4223, 0x4113, 0x2315, 0x6201, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x3304, 0x1326, 0x4223, 0x6201, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x1326, 0x4223, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x5102, 0x4113, 0x2315, 0x3304, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x4113, 0x2315, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF,
        0x6201, 0x3304, 0x5102, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF
    };

    }
}

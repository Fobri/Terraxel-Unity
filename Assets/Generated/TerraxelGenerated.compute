#pragma kernel CSMain
#include "Assets/Shaders/FastNoiseLite/FastNoiseLite.hlsl"

RWStructuredBuffer<int> Result;
float4 offset;

static const fnl_state props1 = fnlCreateState(1337, 0.0010f, 4, 4.0000f, 0.3000f);
static const fnl_state props0 = fnlCreateState(1337, 0.0050f, 2, 3.0000f, 0.5000f);
static const fnl_state props3 = fnlCreateState(1337, 0.0030f, 2, 3.0000f, 0.7000f);
static const fnl_state props2 = fnlCreateState(1337, 0.0070f, 2, 2.0000f, 0.8000f);



float noise(float2 worldPos, float amplitude, fnl_state props){
    return fnlGetNoise2D(props, worldPos.x, worldPos.y) * amplitude;
}

int noiseGenerated(int3 pos){
    pos += offset.xyz;
    float value = (noise(pos.xz + float2(noise(pos.xz + float2(457.0000f,700.0000f), 24.0000f, props0),noise(pos.xz + float2(457.0000f,700.0000f), 24.0000f, props0)), 40.8000f, props1) + noise(pos.xz + float2(noise(pos.xz + float2(1.0000f,1.0000f), 24.0000f, props2),0.0000f), 48.0000f, props3));
    value = (value - pos.y) * 0.5f;
    int density = clamp(value * -127, -127, 127);
    density = (density & 127) | ((density >> 24) & 128);
    return density;
}

uint3 indexToPosition(uint id){
    return uint3(
                id % 32,
                id / 1024,
                id / 32 % 32);
}

[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    int result = ((noiseGenerated(indexToPosition(idx * 4+3))) << 24) | ((noiseGenerated(indexToPosition(idx * 4 + 2))) << 16) 
                | ((noiseGenerated(indexToPosition(idx * 4 + 1))) << 8) | ((noiseGenerated(indexToPosition(idx * 4 + 0))));
    Result[id.x] = result;
}